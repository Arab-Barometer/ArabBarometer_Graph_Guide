[["index.html", "ArabBarometR Graphing Guide Introduction Purpose General Guide Process Example Data Header Code", " ArabBarometR Graphing Guide MaryClare Roche 2023-03-14 Introduction Purpose This guide is meant to give instructions on how to create graphs using the ArabBarometR package. This guide was created using the bookdown package, which comes with many fun and useful features. An overview of these features can be found in the Guide Features section in the general ArabBarometR Guide. As such, this guide assumes a few things: That you have the ArabBarometR package installed on your machine. If this is not true, please take a look at the README file on the ArabBarometR GitHub page. You have a basic understanding of how to load data and packages in R. If this is not true, you can pursue either this guide or this website. General Guide Process Assuming we are working with clean data, the graphs are created in two steps: Create a summary of the data you want to graph. Graph that summary. For each type of graph, the guide will first go through how to create one graph, then how to create many graphs. Example Data The examples in this guide will be created using data from Wave VI. For single survey graphs, it will use data from from Wave VI, Survey I. For trend graphs, it will use data from Wave VI, Survey I, II, and III, where Survey III is the final survey we conducted in Wave VI. The Wave VI data can be found on the Arab Barometer website. In order to create certain graphs (e.g., demographic graphs, comparative graphs for nominal questions, etc.), the data needs to be prepared correctly. The first chapter in this guide introduces several functions included in the ArabBarometR package that allow the user to easily prepare the data. Header Code The code examples in this guide will only focus on how to create graphs. That is, the examples will not include loading and preparing the data or loading libraries. As you begin this guide, make sure your header looks something like the following: setwd(&quot;/Path/to/Folder/with/Data&quot;) library(ArabBarometR) # Our package library(dplyr) # Lots of handy functions library(purrr) # Mapping functions survey1 &lt;- haven::read.dta(&quot;Wave6Survey1.dta&quot;) survey2 &lt;- haven::read.dta(&quot;Wave6Survey2.dta&quot;) survey3 &lt;- haven::read.dta(&quot;Wave6Survey3.dta&quot;) # Preparing Survey 1 data: survey1 &lt;- survey1 %&gt;% age_demographic() %&gt;% gender_demographic() %&gt;% education_demographic() %&gt;% income_demographic() %&gt;% dummy_all(Q2061A) # Preparing Survey 2 data: survey2 &lt;- survey2 %&gt;% age_demographic() %&gt;% gender_demographic() %&gt;% education_demographic() %&gt;% income_demographic() %&gt;% dummy_all(Q2061A) %&gt;% sjlabelled::add_labels(Q2061A, labels=c(`Economic situation` = 1, `Corruption` = 2, `Internal instability` = 6, `Foreign interference` = 7, `Public services` = 12, `COVID-19` = 15, `Other` = 16, `Don&#39;t know/refuse` = 98)) # Preparing Survey 3 data: survey3 &lt;- survey3 %&gt;% # Adding Demographic Categories: age_demographic() %&gt;% gender_demographic() %&gt;% education_demographic() %&gt;% income_demographic() %&gt;% dummy_all(Q2061A) %&gt;% sjlabelled::add_labels(Q2061A, labels=c(`Economic situation` = 1, `Corruption` = 2, `Internal instability` = 6, `Foreign interference` = 7, `Public services` = 12, `COVID-19` = 15, `Other` = 16, `Don&#39;t know/refuse` = 98)) In this code example “/Path/to/Folder/with/Data” is the path to where you are saving your work that also contains your data. This is best practice. For more on folders/working directories, see Section 1.1.2 in the general Arab Barometer Guide. Wave6SurveyX.dta in the above code example is a placeholder for whatever you have named the survey data for Surveys I, II, and III from Wave VI. If you read in the data (using the haven::read.dta() function) and save it as survey1, survey2, and survey3, you should be able to copy and paste the code in this guide exactly as is and run it in your own R session. Chapter 2 introduces the functions used to prepare the data. "],["package-workflow.html", "Package Workflow and Grammar calculate_ functions plot_ functions AB_save()", " Package Workflow and Grammar The package is designed with Arab Barometer’s data and workflow in mind. The functions in the package were written with the express purpose of working with Arab Barometer data. Arab Barometer data has certain structures and features that ArabBarometR functions expect; especially the functions for creating Arab Barometer branded graphs. It is of course possible for data from other sources to have the features, but that is not guaranteed. I encourage the use of the functions from ArabBarometR with Arab Barometer data, while encouraging caution for use with non Arab Barometer data. In the same vein, there is a natural workflow to creating Arab Barometer brand graphs. You will see this workflow repeated over and over again throughout this guide. The workflow consists of three steps: Create summaries of the data. Plot the summaries. Save the plots. In each chapter, you will see how to follow these steps to create a specific type of plot. Generally speaking, for each type of graph there is one function per step. The functions follow naming conventions associated with each step. They are: calculate_ functions plot_ functions AB_save() The calculate_ and plot_ functions are designed to be chained together for simplicity. That is, you can pipe the output of the calculate_ function into the appropriate plot_ function using either the dplyr package pipe %&gt;% or the native pipe |&gt; found in R 4.0+. Furthermore, the calculate_ and plot_ functions that are used together have the same suffix. For example, calculate_X works with plot_X, while calculate_Y works with plot_Y. calculate_ functions The first two required inputs for any calculate_ function are: .ab : An Arab Barometer data frame .var : A variable name from the Arab Barometer data frame The .ab parameter is specifically referring to Arab Barometer data. The calculate_ function will look for certain features in the data frame that are specific to Arab Barometer data. All other parameters1 are set to default values. More details on the specifics of the other parameters and their defaults are provided throughout the guide. plot_ functions The only required input for the (paired) plot_ functions is .df. The parameter .df is the data frame output of the paired calculate_ function. That is, the plot_ function expects its input to be the output of its matching calculate_ function. For example, plot_X expects its input to be the output of calculate_X and plot_Y expects its input to be the output of calculate_Y. NOTE: Currently not all plot_ functions have matching calculate_ functions. As the package continues to develop, most (if not all) plot_ functions will be broken up into a matching calculate_ and plot_ function pair. AB_save() The function AB_save() is a simple wrapper function for ggsave() from the ggplot2 package. The function sets default saving dimension in accordance with Arab Barometer branding. The only required input is what you would like to name your graph. As of 2023-01-23; some of this will likely change in the near future.↩︎ "],["table-of-contents.html", "Table of Contents", " Table of Contents Cross Tabulation Graphs Overall Graphs Overall Demographics Graphs Comparative Graphs Comparative Demographic Graphs BARE BONES Trend Graphs Single Country Trend Graphs Single Country Demographic Trend Graphs Comparative Trend Graphs Comparative Demographic Trend Graphs BARE BONES Stacked Graphs Comparative Stacked Graphs Single Country Stacked Graphs BARE BONES Multi-Question Graphs Single Country Multi-Question Plots Comparative Multi-Question Plots Comparative Gird Graphs Single Country Multi-Question Trend Plots All Things Color Color Options Change Default Colors Highlight Countries with Color How Do I…? Change the Font Size Change the Title/Subtitle/Caption Only Show Certain Countries Change the Order for Stacked Graphs "],["preparing-data.html", "Chapter 1 Preparing Data 1.1 recode_country 1.2 Demographic functions 1.3 Advanced 1.4 education_demographic 1.5 dummy_all 1.6 dummy_select 1.7 In Practice", " Chapter 1 Preparing Data Before we create create graphs or look at summaries, we often need to tidy up the data a bit. ArabBarometR provides a suite of functions to ease this process. In particular, it is useful to create a character columns: with the names of countries rather than their numeric codes; for commonly used demographics (gender, age, income, education, and settlement); and dummied versions of various variables. 1.1 recode_country The input of the recode_country() function is an Arab Barometer data frame. The function takes the COUNTRY variable from an Arab Barometer data frame and creates a Country variable. The original variable COUNTRY should be a labeled numeric value where the numeric value is the country code for the country in which the interview was conducted, and the label is the name of the country. The output variable Country will be a character vector of country names. This function was originally created by Patrick, and updated by MaryClare. 1.1.1 Example: table(survey1$COUNTRY) survey1 &lt;- recode_country(survey1) table(survey1$Country) 1.2 Demographic functions 1.2.1 Basics There are five functions that can be used to create the standard demographic breakdowns Arab Barometer produces graphs for: gender_demographic() : Based on Q1002, outputs variable gender age_demographic() : Based on Q10012, outputs variable age income_demographic() : Based on Q1016, outputs variable income education_demographic() : Based on Q1003, outputs variable education settlement_demographic() : Based on Q13, outputs variable settlement Each of the aforementioned functions generates a dichotomous character variable. The input for each function is an Arab Barometer data frame. 1.2.1.1 Example: # gender survey1 &lt;- gender_demographic(survey1) table(survey1$gender) # Age survey1 &lt;- age_demographic(survey1) table(survey1$age) # Income survey1 &lt;- income_demographic(survey1) table(suvery1$income) # Education survey1 &lt;- education_demographic(survey1) table(survey1$education) # Settlement survey1 &lt;- settlement_demographic(survey1) table(survey1$settlement) 1.3 Advanced Of the five basic demographic creation functions, the user has the ability to manipulate the output of two of them” age_demographic() and education_demographic(). This is because, unlike the other demographics, age is a continuous variable and education has multiple levels. Therefore, the point at which the variables bifurcate can be changed. First let’s look at the age_demographic() function. As seen above, the default output is either \"18-29\" or \"30+\". By setting the parameter .range to N, the user can change the returned values to \"18-(N-1)\" and \"N+\". For example, if the user wanted to compare opinions of those over 60 with the opinions of those under 60, the user could set the parameter .range to 60, so the function age_demographic() returns \"18-59\" and \"60+\". survey1 &lt;- age_demographic(survey1, .range = 60) table(survey1$age) ## ## 18-59 60+ ## 5117 608 Next, let’s look at the education_demographic() function. The return values for the newly formed education column are `” 1.4 education_demographic The education_demographic function creates a dichotomous character column in the data frame titled “education”. You can enter a cutoff by entering a numeric value between 1 and 7 or a character string from value labels of the column Q1003 for the .edu_lvl parameter. The default for this parameter is “Secondary”. The new column “education” has the values “Max Secondary” or “Higher”. If you change the .edu_lvl parameter, the “education” column will have the values “Max .edu_lvl” or “Higher”. If you enter a numeric value, the function will use the value label associated with that number. 1.4.1 Examples: # English: ## Default parameters: survey1 %&gt;% education_demographic() %&gt;% # Creates an &quot;education&quot; column select(education) %&gt;% # Select just the &quot;education&quot; column table() # Create table of the &quot;education&quot; column values ## Changing the cutoff with a character string: survey1 %&gt;% education_demographic(&quot;BA&quot;) %&gt;% select(education) %&gt;% table() ## Changing the cutoff with a numeric: survey1 %&gt;% education_demographic(3) %&gt;% select(education) %&gt;% table() 1.5 dummy_all The dummy_all function takes one or more factor variables and creates a dummy column for each factor level. The new columns are given the original variable name then appended with an underscore and the factor level being dummied. In the example below, you can see when dummy_all is used on the variable b from the data frame df, two new columns are created: b_1 and b_2. By default, dummy_all does not create a dummy column for NA’s. The can be changed, however, by specifying no_NA = FALSE. The function dummy_all takes as input the data frame variables are being selected from and the variable you want to create dummy columns for. More details can be found by typing help(“dummy_all”) into the R Console. 1.5.1 Examples: # Sample Data: a &lt;- c(1,3,2,4,2,3,4,2,2) b &lt;- c(1,2,1,1,2,1,2,2,2) c &lt;- c(2,5,1,1,5,NA,2,NA,5) df &lt;- data.frame(a,b,c) # Original data frame: df # Creating dummy columns for one variable: dummy_all(df,b) # Creating dummy columns for multiple variables: df %&gt;% dummy_all(a,b) # Creating NA dummy column: df %&gt;% dummy_all(c,no_NA = FALSE) 1.6 dummy_select For some variables, we want to create dummy columns for all factor levels, but for other we only want to dummy out a specific level. The dummy_select variable allows the user to select the factor level to create a dummy column for. The function creates a new variable named in the same style as dummy_all; the variable name, underscore, the factor level. The dummy_select column also allows the user to replace the current column with the new dummy column by including the option inplace = TRUE. You can use the function for more than one variable at a time, but not more than one factor level at a time. For example, if two columns both have 1 as a factor level and you want to create a dummy for when the factor is 1, you can include both columns in dummy_select. However, you cannot create a dummy for when the factor(s) are 1 and 2 in the same command. You would have to run the command once for level 1 and once for level 2. The following example uses the same sample data as before. More details can be found by typing help(“dummy_select”) into your R Console. 1.6.1 Examples: # Adding new column: dummy_select(df,b,dummy_lvl = 1) # Adding multiple new column: df %&gt;% dummy_select(b,c,dummy_lvl = 1) # Replacing column: dummy_select(df,a,dummy_lvl = 4,inplace = TRUE) 1.7 In Practice The functions presented so far can be used in combination to recreate the standard cleaning we use to prep the Arab Barometer data frames for graph creation. Remember: You can copy and paste this code exactly. 1.7.1 Example: # English: survey1 = survey1 %&gt;% # Adding Demographic Categories: age_demographic() %&gt;% gender_demographic() %&gt;% education_demographic() %&gt;% income_demographic() %&gt;% dummy_all(Q2061A) An update to the function age_demographic() has been requested and is on the docket. The update requests that the function takes account ages missing from Q1001 if they are supplied by Q1001YEAR or Q1001APPROX.↩︎ "],["chapter-1.html", "Chapter 2 Single Country Overall Graphs 2.1 Create a Single Graph 2.2 Create Many Graphs", " Chapter 2 Single Country Overall Graphs This chapter will cover how to make an overall frequency graph for a single country. 2.1 Create a Single Graph This section will go over how to make a one-off frequency graph for a single country. At the end, your code will look like the following: survey1 %&gt;% calculate_smry_individual(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) %&gt;% plot_smry_individual(.caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot;) That code will produce the following graph: Let’s go! 2.1.1 Create a Summary The first step in creating a plot is to gather the data you want to display and organize it. You do this with the create_smry_individual() function. The three main parameters you need to provide to this function are (1) the data you are using, (2) the variable you want to plot, and (3) the country you want to plot it for. To see all the input parameters for the function, type the code ?calculate_smry_individual in your R console. In this example, the variable we want to plot is Q1COVID19 and the country we want to plot it for is Algeria. calculate_smry_individual( .ab = survey1, # The data you are using .var = &quot;Q1COVID19&quot;, # The variable you want to plot .country = &quot;Algeria&quot; # The country you want to plot it for ) The above is the same as: calculate_smry_individual(survey1,&quot;Q1COVID19&quot;,&quot;Algeria&quot;) Which is the same as: survey1 %&gt;% calculate_smry_individual(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) The last example uses a pipe, %&gt;%, which comes from the package dplyr. To learn more about piping and using %&gt;% in programming, see A Note on Piping in the ArabBarometR guide. The output of any of the above expressions is the same: ## # A tibble: 5 × 2 ## Q1COVID19 Percent ## &lt;dbl+lbl&gt; &lt;dbl&gt; ## 1 1 [Very concerned] 28 ## 2 2 [Somewhat concerned] 44 ## 3 3 [Somewhat not concerned] 8 ## 4 4 [Not at all concerned] 20 ## 5 666 [Don&#39;t know/Refuse] 0 This data frame is what we are ultimately graphing. There are few things to note about the summary data frame we just created. First, there are two columns. The first column is named for the question we are graphing. The second column is named Percent. If you want to use the plotting functions in ArabBarometR to graph a summary data frame that is not created by a calculate function, the data frame must be structured as two columns with the second column named Percent. Second, you can see that the first column is labeled. The labels come from the responses in the data. If the responses in the data are not labeled, this column will not be labeled. In the next step, plotting, the y-axis labels are taken from these labels. So, if the column is not labeled, the y-axis will just be the values of the column. Let’s store the summary as an object and move on. Q1COVID19_summary &lt;- survey1 %&gt;% calculate_smry_individual(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) 2.1.2 Plot the Summary The next step is plot the summary we just created. To do this, we use the function plot_smry_individual(). There is only one necessary parameter to use plot_smry_individual(): the summary data frame. For a complete list of acceptable parameters and documentation, you can run ?plot_smry_individual in your R console. Now, we can plug our summary into the plot function: plot_smry_individual( .df = Q1COVID19_summary # The summary data frame ) The above code is the same as: Q1COVID19_summary %&gt;% plot_smry_individual() Which is the SAME as: survey1 %&gt;% calculate_smry_individual(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) %&gt;% plot_smry_individual() We can do this because Q1COVID19_summary is equal to survey1 %&gt;% calculate_smry_individual(\"Q1COVID19\", \"Algeria\"). Any of the above code gives the following graph: Almost done! Notice how the caption says Arab Barometer Wave N (DATE)? Let’s change that. survey1 %&gt;% calculate_smry_individual(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) %&gt;% plot_smry_individual( .caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot; # NEW caption ) Now we have the plot we started with! We’re done! 2.2 Create Many Graphs As a rule of thumb in programming, if you can create something one time, you can create it a bajillion times. This is good because for each wave, Arab Barometer needs approximately a bajillion graphs. To create many graphs at once, there are three steps to follow. First, identify the variables to plot. Second, create summaries of those variables. Third, plot those summaries. At the end of this section, your code will look like the following: #.....................Identify the variables..................... variables_2_plot &lt;- list(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) names(variables_2_plot) &lt;- c(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) #......................Create the summaries...................... summaries &lt;- survey1 %&gt;% calculate_smry_individual(variables_2_plot, &quot;Algeria&quot;) #.......................Plot the summaries....................... plots &lt;- map(summaries, plot_smry_individual, .caption = &quot;Arab Barometer Wave VI, Survey I&quot;) The result is a named list of plots. Each element in the list is a plot. The element is named for the variable it is a plot of. For example, to see the plot for variable Q1COVID19, run the following code: plots$Q1COVID19 To see the plot for variable Q2061A, run the following code: plots$Q2061A Finally, to see the plot for variable Q609, run the following code: plots$Q609 That’s it! The only limit on the number of graphs you can create at once is the time it will take R to make them. The more graphs you try to create at once, the longer it will take. Let’s begin. 2.2.1 Identify the Variables When creating many graphs, you need to tell R which variables you want to make plots of. This is true for when you want to create a single graph as well, but it is much more strongly implied. Plus, the variables must be identified in a specific way. To create many summaries at once, you need to provide your variables in a named list. To create a named list, first make a list of the variables you want to plot. variables_2_plot &lt;- list(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) The next step is to name your list. names(variables_2_plot) &lt;- c(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) Now, you have a named list of variables. Time to summarize them. 2.2.2 Create Summaries The same function used to create a single summary is used to create many summaries: calculate_smry_individual(). Recall it takes three parameters: (1) the data you are using, (2) the variable(s) you want to plot, and (3) the country you are creating the plot for. Now, instead of one variable, you supply the list of variables. calculate_smry_individual( .ab = survey1, # The data you are using .var = variables_2_plot, # The variables you want to plot .country = &quot;Algeria&quot; # The country you want to plot it for ) The above is the same as: calculate_smry_individual(survey1,variables_2_plot,&quot;Algeria&quot;) Which is the same as: survey1 %&gt;% calculate_smry_individual(variables_2_plot, &quot;Algeria&quot;) All of the above code in this section produces the same result: a named list. Each element in the list is a summary of a variable. The variable is the name of the list. In long form, it looks like the following: ## $Q1COVID19 ## # A tibble: 5 × 2 ## Q1COVID19 Percent ## &lt;dbl+lbl&gt; &lt;dbl&gt; ## 1 1 [Very concerned] 28 ## 2 2 [Somewhat concerned] 44 ## 3 3 [Somewhat not concerned] 8 ## 4 4 [Not at all concerned] 20 ## 5 666 [Don&#39;t know/Refuse] 0 ## ## $Q2061A ## # A tibble: 8 × 2 ## Q2061A Percent ## &lt;dbl+lbl&gt; &lt;dbl&gt; ## 1 1 [Economic situation] 28 ## 2 2 [Corruption] 7 ## 3 6 [Instability] 4 ## 4 7 [Foreign interference] 2 ## 5 12 [Public services] 1 ## 6 15 [COVID-19] 52 ## 7 16 [Other] 4 ## 8 666 [Don&#39;t know/Refuse] 2 ## ## $Q609 ## # A tibble: 4 × 2 ## Q609 Percent ## &lt;dbl+lbl&gt; &lt;dbl&gt; ## 1 1 [Religious] 48 ## 2 2 [Somewhat religious] 49 ## 3 3 [Not religious] 2 ## 4 666 [Don&#39;t know/Refuse] 1 Let’s save this outcome as an object and move on to plotting. summaries &lt;- survey1 %&gt;% calculate_smry_individual(variables_2_plot, &quot;Algeria&quot;) 2.2.3 Plot the Summaries Again, the same function to create one plot is used to create many plots: plot_smry_individual(). Unlike last time, a helper function is needed to create multiple plots. The helper function is called map. The map function takes two inputs: (1) a list of things to pass to a function, and (2) a function. Essentially, map takes each item in the list, and passes it to the function very efficiently. In this case, you supply the list of summaries you just created, and the plot_sumry_individual() function. The code follows: map( summaries, # List of summaries plot_smry_individual # Plotting function ) The code produces the following output: map( summaries, # List of summaries plot_smry_individual # Plotting function ) ## $Q1COVID19 ## ## $Q2061A ## ## $Q609 Notice, yet again, the caption needs to be changed. To change the caption for all the graphs, just add one line to the map function. map( summaries, # List of summaries plot_smry_individual, # Plotting function .caption = &quot;Arab Barometer Wave VI, Survey I&quot; # Caption ) ## $Q1COVID19 ## ## $Q2061A ## ## $Q609 Congratulations! You have created three plots at once. You can store them in as a single list and call them one at a time. plots &lt;- map( summaries, # List of summaries plot_smry_individual, # Plotting function .caption = &quot;Arab Barometer Wave VI, Survey I&quot; # Caption ) Now, all three plots have been stored in a named list named plots. To look at the first plot: plots$Q1COVID19 To see the plot for variable Q2061A, run the following code: plots$Q2061A Finally, to see the plot for variable Q609, run the following code: plots$Q609 You have now completed all steps in the example code. Congrats! "],["single-country-demographic-plots.html", "Chapter 3 Single Country Demographic Plots 3.1 Create a Single Graph 3.2 Create Many Graphs", " Chapter 3 Single Country Demographic Plots This chapter will cover how to make a frequency graph by a demographic for a single country. 3.1 Create a Single Graph This section will go over how to make a one-off frequency graph by a demographic for a single country. At the end, your code will look like the following: survey1 %&gt;% calculate_demographic_smry_individual(&quot;Q1COVID19&quot;, .dem = &quot;gender&quot;, .country = &quot;Algeria&quot;) %&gt;% plot_demographic_smry_individual(.caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot;) That code will produce the following graph: 3.1.1 Creating a Summary The first step in creating a plot is to gather the data you want to display and organize it. You do this with the calculate_demographic_smry_individual() function. Just like calculate_smry_individual(), the three main parameters you need to provide to this function are (1) the data you are using, (2) the variable you want to plot, and (3) the country you want to plot it for. To see all the input parameters for the function, type the code ?calculate_demographic_smry_individual in your R console. In this example, the variable we want to plot is Q1COVID19, and the country we want to plot it for is Algeria3. survey1 %&gt;% # Data calculate_demographic_smry_individual(&quot;Q1COVID19&quot;, # Variable to summarize .country = &quot;Algeria&quot;) # Country The above code will produce the following output: ## $age ## # A tibble: 10 × 3 ## age Q1COVID19 Percent ## &lt;chr&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; ## 1 18-59 1 [Very concerned] 24 ## 2 18-59 2 [Somewhat concerned] 47 ## 3 18-59 3 [Somewhat not concerned] 8 ## 4 18-59 4 [Not at all concerned] 21 ## 5 18-59 666 [Don&#39;t know/Refuse] 0 ## 6 60+ 1 [Very concerned] 49 ## 7 60+ 2 [Somewhat concerned] 25 ## 8 60+ 3 [Somewhat not concerned] 9 ## 9 60+ 4 [Not at all concerned] 17 ## 10 60+ 666 [Don&#39;t know/Refuse] 1 ## ## $gender ## # A tibble: 9 × 3 ## gender Q1COVID19 Percent ## &lt;chr&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; ## 1 Female 1 [Very concerned] 33 ## 2 Female 2 [Somewhat concerned] 44 ## 3 Female 3 [Somewhat not concerned] 8 ## 4 Female 4 [Not at all concerned] 15 ## 5 Male 1 [Very concerned] 22 ## 6 Male 2 [Somewhat concerned] 44 ## 7 Male 3 [Somewhat not concerned] 9 ## 8 Male 4 [Not at all concerned] 25 ## 9 Male 666 [Don&#39;t know/Refuse] 0 ## ## $education ## # A tibble: 10 × 3 ## education Q1COVID19 Percent ## &lt;chr&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; ## 1 Above Secondary 1 [Very concerned] 25 ## 2 Above Secondary 2 [Somewhat concerned] 49 ## 3 Above Secondary 3 [Somewhat not concerned] 11 ## 4 Above Secondary 4 [Not at all concerned] 16 ## 5 Above Secondary 666 [Don&#39;t know/Refuse] 0 ## 6 Max Secondary 1 [Very concerned] 29 ## 7 Max Secondary 2 [Somewhat concerned] 42 ## 8 Max Secondary 3 [Somewhat not concerned] 6 ## 9 Max Secondary 4 [Not at all concerned] 23 ## 10 Max Secondary 666 [Don&#39;t know/Refuse] 0 ## ## $income ## # A tibble: 9 × 3 ## income Q1COVID19 Percent ## &lt;chr&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; ## 1 Can cover expenses 1 [Very concerned] 28 ## 2 Can cover expenses 2 [Somewhat concerned] 43 ## 3 Can cover expenses 3 [Somewhat not concerned] 10 ## 4 Can cover expenses 4 [Not at all concerned] 20 ## 5 Can cover expenses 666 [Don&#39;t know/Refuse] 0 ## 6 Cannot cover expenses 1 [Very concerned] 26 ## 7 Cannot cover expenses 2 [Somewhat concerned] 48 ## 8 Cannot cover expenses 3 [Somewhat not concerned] 7 ## 9 Cannot cover expenses 4 [Not at all concerned] 19 Woah, that’s a lot of summaries! By default, calculate_demographic_smry_individual() creates summaries for age, gender, income, and education. To specify exactly which demographic we want to group the data by, we include one more parameter. survey1 %&gt;% # Data calculate_demographic_smry_individual(&quot;Q1COVID19&quot;, # Variable to summarize .country = &quot;Algeria&quot;, # Country .dem = &quot;gender&quot;) # Demographic to group data by By specifying the parameter .dem, the function now knows it should only group the data by the variables gender. Now the output is as follows: ## $gender ## # A tibble: 9 × 3 ## gender Q1COVID19 Percent ## &lt;chr&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; ## 1 Female 1 [Very concerned] 33 ## 2 Female 2 [Somewhat concerned] 44 ## 3 Female 3 [Somewhat not concerned] 8 ## 4 Female 4 [Not at all concerned] 15 ## 5 Male 1 [Very concerned] 22 ## 6 Male 2 [Somewhat concerned] 44 ## 7 Male 3 [Somewhat not concerned] 9 ## 8 Male 4 [Not at all concerned] 25 ## 9 Male 666 [Don&#39;t know/Refuse] 0 The function calcuate_demographic_smry() creates a named list. In this list, each item is a summary broken down by a demographic and the name of each item is that demographic. Let’s save our gender demographic summary and move on to plotting it. Q1COVID19_gender &lt;- survey1 %&gt;% calculate_demographic_smry_individual(&quot;Q1COVID19&quot;, .country = &quot;Algeria&quot;, .dem = &quot;gender&quot;) 3.1.2 Plotting the Summary The next step is plot the summary we just created. To do this, we use the function plot_demographic_smry_individual(). There is only one necessary parameter to use plot_smry_individual(): the summary data frame. For a complete list of acceptable parameters and documentation, you can run ?plot_demographic_smry_individual in your R console. Now, we can plug our summary into the plot function: plot_demographic_smry_individual(Q1COVID19_gender) The above code is the same as: Q1COVID19_gender %&gt;% plot_demographic_smry_individual() Both stylings of code produce the following graph: Yet again, we see the caption needs to be changed. We can change it the same way we did in Chapter 1. Q1COVID19_gender %&gt;% plot_demographic_smry_individual( .caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot; ) Now we have the graph: Since Q1COVID19_gender is the same as survey1 %&gt;% calculate_demographic_smry_individual(\"Q1COVID19\", .country = \"Algeria\", .dem = \"gender\"), we can substitute the former with the latter to get the original code in our example. This will give us the same plot that we just created. survey1 %&gt;% calculate_demographic_smry_individual(&quot;Q1COVID19&quot;, .dem = &quot;gender&quot;, .country = &quot;Algeria&quot;) %&gt;% plot_demographic_smry_individual(.caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot;) 3.2 Create Many Graphs We will follow the same steps from Chapter one to create many graphs at once. First, identify the variables to plot. Second, create summaries of those variables. Third, plot those summaries. At the end of this section, your code will look like the following: #.....................Identify the variables..................... variables_2_plot &lt;- list(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) names(variables_2_plot) &lt;- c(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) #......................Create the summaries...................... gender_summaries &lt;- survey1 %&gt;% calculate_demographic_smry_individual(variables_2_plot, &quot;Algeria&quot;, .dem = &quot;gender&quot;) #.......................Plot the summaries....................... gender_plots &lt;- map(gender_summaries, plot_demographic_smry_individual, .caption = &quot;Arab Barometer Wave VI, Survey I&quot;) The result is a named list of plots. Each element in the list is a plot. The element is named for the variable it is a plot of. For example, to see the plot for variable Q1COVID19, run the following code: gender_plots$Q1COVID19 To see the plot for variable Q2061A, run the following code: gender_plots$Q2061A Finally, to see the plot for variable Q609, run the following code: gender_plots$Q609 That’s it! The only limit on the number of graphs you can create at once is the time it will take R to make them. The more graphs you try to create at once, the longer it will take. The steps to creating a named variable list are exactly the same as the ones we reviewed in Chapter 1; therefore, we will begin by creating summaries. For a refresher on creating named lists, click here. We will use the same variables as in Chapter 1: Q1COVID19, Q2061A, and Q609. Let’s begin. 3.2.1 Create Summaries The same function used to create a single summary is used to create many summaries: calculate_demographic_smry_individual(). Recall it takes three parameters: (1) the data you are using, (2) the variable(s) you want to plot, and (3) the country you are creating the plot for. Now, instead of one variable, you supply the list of variables. survey1 %&gt;% # Data calculate_demographic_smry_individual(variables_2_plot, # Variables to summarize &quot;Algeria&quot;) # Country The above code produces a nested named list. Each element in the list is another named list. Each element in the outer list is named for a variable you want to create summaries for. The inner list of each element is a summary with the data grouped by age, gender, income, and education. You can think of it like the following bullet point list: calculate_demographic_smry_individual output Q1COVID19 age Q1COVID19 summary grouped by age gender Q1COVID19 summary grouped by gender income Q1COVID19 summary grouped by income education Q1COVID19 summary grouped by education Q2061A age Q2061A summary grouped by age gender Q2061A summary grouped by gender income Q2061A summary grouped by income education Q2061A summary grouped by education Q609 age Q609 summary grouped by age gender Q609 summary grouped by gender income Q609 summary grouped by income education Q609 summary grouped by education For this example, we will again only be focusing on gender plots. To get only gender summaries, just specify the .dem parameter. survey1 %&gt;% # Data calculate_demographic_smry_individual(variables_2_plot, # Variables to summarize &quot;Algeria&quot;, # Country .dem = &quot;gender&quot;) # Demographic Now, the output of this function looks like this bullet point list: calculate_demographic_smry_individual(.dem=\"gender\") output Q1COVID19 gender Q1COVID19 summary grouped by gender Q2061A gender Q2061A summary grouped by gender Q609 gender Q609 summary grouped by gender Much more manageable . Let’s save this outcome as an object and move on to plotting. gender_summaries &lt;- survey1 %&gt;% calculate_demographic_smry_individual(variables_2_plot, &quot;Algeria&quot;, .dem = &quot;gender&quot;) 3.2.2 Plot the Summaries Again, the same function to create one plot is used to create many plots: plot_demographic_smry_individual(). Just like in Chapter 1, we need to use the map function. In this case, you supply the list of summaries you just created, and the plot_demographic_sumry_individual() function. The code follows: map( gender_summaries, # List of summaries plot_demographic_smry_individual # Plotting function ) The code produces the following output: map( gender_summaries, # List of summaries plot_demographic_smry_individual # Plotting function ) ## $Q1COVID19 ## ## $Q2061A ## ## $Q609 Notice, yet again, the caption needs to be changed. To change the caption for all the graphs, just add one line to the map function. map( gender_summaries, # List of summaries plot_demographic_smry_individual, # Plotting function .caption = &quot;Arab Barometer Wave VI, Survey I&quot; # Caption ) ## $Q1COVID19 ## ## $Q2061A ## ## $Q609 Congratulations! You have created three plots at once. You can store them in as a single list and call them one at a time. gender_plots &lt;- map( gender_summaries, # List of summaries plot_demographic_smry_individual, # Plotting function .caption = &quot;Arab Barometer Wave VI, Survey I&quot; # Caption ) Now, all three plots have been stored in a named list named gender_plots. To look at the first plot: gender_plots$Q1COVID19 To see the plot for variable Q2061A, run the following code: gender_plots$Q2061A Finally, to see the plot for variable Q609, run the following code: gender_plots$Q609 You have now completed all steps in the example code. Congrats! If the style of this code is confusing, see Create a Summary in Chapter 1↩︎ "],["comparative-overall-graphs.html", "Chapter 4 Comparative Overall Graphs 4.1 Create a Single Graph 4.2 Create Many Graphs", " Chapter 4 Comparative Overall Graphs This chapter will cover how to make a comparative frequency graph for multiple countries. 4.1 Create a Single Graph This section will go over how to make a one-off comparative frequency graph for a multiple countries. At the end, your code will look like the following: survey1 %&gt;% calculate_smry_comp(&quot;Q1COVID19&quot;) %&gt;% plot_smry_comp(.caption = &quot;Arab Barometer Wave VI, Survey I&quot;) That code will produce the following graph: 4.1.1 Create a Summary The process of creating an overall comparative graph is intentionally similar to creating a overall individual graph. As always, the first step is to organize the data we want to graph. For this we use the function calculate_smry_comp(), which is the comparative version of the individual summary function. The function requires only two parameters: (1) the data you are using, and (2) the variable you want to summarize. There are several other optional parameters. To see all the input parameters for the function, type the code ?calculate_smry_comp in your R console. For the example in this section, we are using the data set survey1 and summarizing the variable Q1COVID19. calculate_smry_comp( .ab = survey1, # The data you are using .var = &quot;Q1COVID19&quot; # The variable you want to plot ) Recall the above code is the same as typing: survey1 %&gt;% calculate_smry_comp(&quot;Q1COVID19&quot;) Let’s take a look at the output: ## # A tibble: 6 × 2 ## Country Q1COVID19 ## &lt;chr&gt; &lt;dbl&gt; ## 1 Algeria 72 ## 2 Jordan 61 ## 3 Lebanon 82 ## 4 Libya 75 ## 5 Morocco 65 ## 6 Tunisia 59 A few things to notice about the output of this function: The first column is called Country. This will always be the case. The plot function used for comparative summaries will expect this. The second column is named after the question being summarized. This will always be the case. The plot function used for comparative summaries will expect this. The title of the graph will depend on the name of this column. If you wish to provide the plot function your own summary, it will have to follow these conventions. Now we’ll store the summary as an object comparative_summary and move on to plotting it. comparative_summary &lt;- survey1 %&gt;% calculate_smry_comp(&quot;Q1COVID19&quot;) 4.1.2 Plot the Summary The next step is plot the summary we just created. To do this, we use the function plot_smry_comp(). There is only one necessary parameter to use plot_smry_comp(): the summary data frame. For a complete list of acceptable parameters and documentation, you can run ?plot_smry_comp in your R console. Now, we can plug our summary into the plot function: plot_smry_comp( .df = comparative_summary # The summary data frame ) The above code is the same as: comparative_summary %&gt;% plot_smry_comp() Which is the SAME as: survey1 %&gt;% calculate_smry_comp(&quot;Q1COVID19&quot;) %&gt;% plot_smry_comp() We can do this because comparative_summary is equal to survey1 %&gt;% calculate_smry_comp(\"Q1COVID19\"). Any of the above code gives the following graph: Almost done! Notice how the caption says Arab Barometer Wave N (DATE)? Let’s change that. survey1 %&gt;% calculate_smry_comp(&quot;Q1COVID19&quot;) %&gt;% plot_smry_comp( .caption = &quot;Arab Barometer Wave VI, Survey I&quot; # NEW caption ) Now we have the plot we started with! We’re done! 4.2 Create Many Graphs As a rule of thumb in programming, if you can create something one time, you can create it a bajillion times. This is good because for each wave, Arab Barometer needs approximately a bajillion graphs. To create many graphs at once, there are three steps to follow. First, identify the variables to plot. Second, create summaries of those variables. Third, plot those summaries. At the end of this section, your code will look like the following: #.....................Identify the variables..................... variables_2_plot &lt;- list(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) names(variables_2_plot) &lt;- c(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) #......................Create the summaries...................... summaries &lt;- survey1 %&gt;% calculate_smry_comp(variables_2_plot) #.......................Plot the summaries....................... plots &lt;- map(summaries, plot_smry_comp, .caption = &quot;Arab Barometer Wave VI, Survey I&quot;) The result is a named list of plots. Each element in the list is a plot. The element is named for the variable it is a plot of. For example, to see the plot for variable Q1COVID19, run the following code: comparative_plots$Q1COVID19 To see the plot for variable Q2061A, run the following code: comparative_plots$Q2061A Finally, to see the plot for variable Q609, run the following code: comparative_plots$Q609 That’s it! The only limit on the number of graphs you can create at once is the time it will take R to make them. The more graphs you try to create at once, the longer it will take. Let’s begin. 4.2.1 Identify the Variables When creating many graphs, you need to tell R which variables you want to make plots of. This is true for when you want to create a single graph as well, but it is much more strongly implied. Plus, the variables must be identified in a specific way. To create many summaries at once, you need to provide your variables in a named list. To create a named list, first make a list of the variables you want to plot. variables_2_plot &lt;- list(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) The next step is to name your list. names(variables_2_plot) &lt;- c(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) Now, you have a named list of variables. Time to summarize them. 4.2.2 Create Summaries The same function used to create a single summary is used to create many summaries: calculate_smry_comp(). Recall it takes three parameters: (1) the data you are using, and (2) the variable(s) you want to plot. Now, instead of one variable, you supply the list of variables. calculate_smry_comp( .ab = survey1, # The data you are using .var = variables_2_plot # The variables you want to plot ) The above is the same as: calculate_smry_comp(survey1,variables_2_plot) Which is the same as: survey1 %&gt;% calculate_smry_comp(variables_2_plot) All of the above code in this section produces the same result: a named list. Each element in the list is a summary of a variable. The variable is the name of the list. In long form, it looks like the following: ## $Q1COVID19 ## # A tibble: 6 × 2 ## Country Q1COVID19 ## &lt;chr&gt; &lt;dbl&gt; ## 1 Algeria 72 ## 2 Jordan 61 ## 3 Lebanon 82 ## 4 Libya 75 ## 5 Morocco 65 ## 6 Tunisia 59 ## ## $Q2061A ## # A tibble: 6 × 2 ## Country Q2061A ## &lt;chr&gt; &lt;dbl&gt; ## 1 Algeria 28 ## 2 Jordan 41 ## 3 Lebanon 64 ## 4 Libya 19 ## 5 Morocco 37 ## 6 Tunisia 51 ## ## $Q609 ## # A tibble: 6 × 2 ## Country Q609 ## &lt;chr&gt; &lt;dbl&gt; ## 1 Algeria 48 ## 2 Jordan 37 ## 3 Lebanon 30 ## 4 Libya 26 ## 5 Morocco 62 ## 6 Tunisia 31 Let’s save this outcome as an object and move on to plotting. We will save the list of comparative summaries as an object called comparative_summaries. comparative_summaries &lt;- survey1 %&gt;% calculate_smry_comp(variables_2_plot) 4.2.3 Plot the Summaries Again, the same function to create one plot is used to create many plots: plot_smry_comp(). Unlike last time, a helper function is needed to create multiple plots. The helper function is called map. The map function takes two inputs: (1) a list of things to pass to a function, and (2) a function. Essentially, map takes each item in the list, and passes it to the function very efficiently. In this case, you supply the list of summaries you just created, and the plot_sumry_comp() function. The code follows: map( comparative_summaries, # List of summaries plot_smry_comp # Plotting function ) The code produces the following output: map( comparative_summaries, # List of summaries plot_smry_comp # Plotting function ) ## $Q1COVID19 ## ## $Q2061A ## ## $Q609 Notice, yet again, the caption needs to be changed. To change the caption for all the graphs, just add one line to the map function. map( comparative_summaries, # List of summaries plot_smry_comp, # Plotting function .caption = &quot;Arab Barometer Wave VI, Survey I&quot; # Caption ) ## $Q1COVID19 ## ## $Q2061A ## ## $Q609 Congratulations! You have created three plots at once. You can store them in as a single list and call them one at a time. comparative_plots &lt;- map( comparative_summaries, # List of summaries plot_smry_comp, # Plotting function .caption = &quot;Arab Barometer Wave VI, Survey I&quot; # Caption ) Now, all three plots have been stored in a named list named comparative_summaries. To look at the first plot: comparative_plots$Q1COVID19 To see the plot for variable Q2061A, run the following code: comparative_plots$Q2061A Finally, to see the plot for variable Q609, run the following code: comparative_plots$Q609 You have now completed all steps in the example code. Congrats! "],["comparative-demographic-graphs.html", "Chapter 5 Comparative Demographic Graphs 5.1 Create a Single Graph 5.2 Create Many Graphs", " Chapter 5 Comparative Demographic Graphs This chapter will cover how to make a comparative frequency graph by demographic for multiple countries. 5.1 Create a Single Graph This section will go over how to make a one-off comparative frequency graph by demographic for a multiple countries. At the end, your code will look like the following: survey1 %&gt;% calculate_demographic_smry_comp(&quot;Q1COVID19&quot;, .dem = &quot;gender&quot;) %&gt;% plot_demographic_smry_comp(.caption = &quot;Arab Barometer Wave VI, Survey I&quot;) That code will produce the following graph: Let’s make it. 5.1.1 Creating a Summary The first step in creating a plot is to gather the data you want to display and organize it. You do this with the calculate_demographic_smry_comp() function. Just like calculate_smry_comp(), the two main parameters you need to provide to this function are (1) the data you are using, and (2) the variable you want to plot. To see all the input parameters for the function, type the code ?calculate_demographic_smry_comp in your R console. In this example, the variable we want to plot is Q1COVID194. survey1 %&gt;% # Data calculate_demographic_smry_comp(&quot;Q1COVID19&quot;) # Variable to summarize The above code will produce the following output: ## $age ## $age$Q1COVID19 ## # A tibble: 12 × 3 ## # Groups: Country [6] ## Country age Q1COVID19 ## &lt;chr&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 Algeria 18-59 71 ## 2 Algeria 60+ 74 ## 3 Jordan 18-59 62 ## 4 Jordan 60+ 59 ## 5 Lebanon 18-59 82 ## 6 Lebanon 60+ 87 ## 7 Libya 18-59 76 ## 8 Libya 60+ 73 ## 9 Morocco 18-59 67 ## 10 Morocco 60+ 55 ## 11 Tunisia 18-59 59 ## 12 Tunisia 60+ 60 ## ## ## $gender ## $gender$Q1COVID19 ## # A tibble: 12 × 3 ## # Groups: Country [6] ## Country gender Q1COVID19 ## &lt;chr&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 Algeria Female 77 ## 2 Algeria Male 66 ## 3 Jordan Female 68 ## 4 Jordan Male 54 ## 5 Lebanon Female 87 ## 6 Lebanon Male 77 ## 7 Libya Female 83 ## 8 Libya Male 68 ## 9 Morocco Female 75 ## 10 Morocco Male 56 ## 11 Tunisia Female 68 ## 12 Tunisia Male 50 ## ## ## $education ## $education$Q1COVID19 ## # A tibble: 12 × 3 ## # Groups: Country [6] ## Country education Q1COVID19 ## &lt;chr&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 Algeria Above Secondary 73 ## 2 Algeria Max Secondary 71 ## 3 Jordan Above Secondary 61 ## 4 Jordan Max Secondary 62 ## 5 Lebanon Above Secondary 83 ## 6 Lebanon Max Secondary 83 ## 7 Libya Above Secondary 75 ## 8 Libya Max Secondary 76 ## 9 Morocco Above Secondary 74 ## 10 Morocco Max Secondary 62 ## 11 Tunisia Above Secondary 68 ## 12 Tunisia Max Secondary 57 ## ## ## $income ## $income$Q1COVID19 ## # A tibble: 12 × 3 ## # Groups: Country [6] ## Country income Q1COVID19 ## &lt;chr&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 Algeria Can cover expenses 70 ## 2 Algeria Cannot cover expenses 73 ## 3 Jordan Can cover expenses 60 ## 4 Jordan Cannot cover expenses 62 ## 5 Lebanon Can cover expenses 85 ## 6 Lebanon Cannot cover expenses 81 ## 7 Libya Can cover expenses 79 ## 8 Libya Cannot cover expenses 69 ## 9 Morocco Can cover expenses 66 ## 10 Morocco Cannot cover expenses 65 ## 11 Tunisia Can cover expenses 57 ## 12 Tunisia Cannot cover expenses 60 Woah, that’s a lot of summaries! By default, calculate_demographic_smry_comp() creates summaries for age, gender, income, and education. To specify exactly which demographic we want to group the data by, we include one more parameter. survey1 %&gt;% # Data calculate_demographic_smry_comp(&quot;Q1COVID19&quot;, # Variable to summarize .dem = &quot;gender&quot;) # Demographic to group data by By specifying the parameter .dem, the function now knows it should only group the data by the variables gender. Now the output is as follows: ## # A tibble: 12 × 3 ## # Groups: Country [6] ## Country gender Q1COVID19 ## &lt;chr&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 Algeria Female 77 ## 2 Algeria Male 66 ## 3 Jordan Female 68 ## 4 Jordan Male 54 ## 5 Lebanon Female 87 ## 6 Lebanon Male 77 ## 7 Libya Female 83 ## 8 Libya Male 68 ## 9 Morocco Female 75 ## 10 Morocco Male 56 ## 11 Tunisia Female 68 ## 12 Tunisia Male 50 The function calcuate_demographic_smry() creates a named list. In this list, each item is a summary broken down by a demographic and the name of each item is that demographic. Let’s save our gender demographic summary and move on to plotting it. comparative_Q1COVID19_gender &lt;- survey1 %&gt;% calculate_demographic_smry_comp(&quot;Q1COVID19&quot;, .dem = &quot;gender&quot;) 5.1.2 Plotting the Summary The next step is plot the summary we just created. To do this, we use the function plot_demographic_smry_comp(). There is only one necessary parameter to use plot_smry_comp(): the summary data frame. For a complete list of acceptable parameters and documentation, you can run ?plot_demographic_smry_comp in your R console. Now, we can plug our summary into the plot function: plot_demographic_smry_comp(comparative_Q1COVID19_gender) The above code is the same as: comparative_Q1COVID19_gender %&gt;% plot_demographic_smry_comp() Both stylings of code produce the following graph: Yet again, we see the caption needs to be changed. We can change it the same way we did in Chapter 1. comparative_Q1COVID19_gender %&gt;% plot_demographic_smry_comp( .caption = &quot;Arab Barometer Wave VI, Survey I&quot; ) Now we have the graph: Since comparative_Q1COVID19_gender is the same as survey1 %&gt;% calculate_demographic_smry_comp(\"Q1COVID19\", .dem = \"gender\"), we can substitute the former with the latter to get the original code in our example. This will give us the same plot that we just created. survey1 %&gt;% calculate_demographic_smry_comp(&quot;Q1COVID19&quot;, .dem = &quot;gender&quot;,) %&gt;% plot_demographic_smry_comp(.caption = &quot;Arab Barometer Wave VI, Survey I&quot;) Tada! You have created the example graph. 5.2 Create Many Graphs We will follow the same steps from Chapter Three (and Two, and One…) to create many graphs at once. First, identify the variables to plot. Second, create summaries of those variables. Third, plot those summaries. At the end of this section, your code will look like the following: #.....................Identify the variables..................... variables_2_plot &lt;- list(&quot;Q1COVID19&quot;, &quot;Q2061A_1&quot;, &quot;Q609&quot;) names(variables_2_plot) &lt;- c(&quot;Q1COVID19&quot;, &quot;Q2061A_1&quot;, &quot;Q609&quot;) #......................Create the summaries...................... comparative_gender_summaries &lt;- survey1 %&gt;% calculate_demographic_smry_comp(variables_2_plot, .dem = &quot;gender&quot;) #.......................Plot the summaries....................... comparative_gender_plots &lt;- map(comparative_gender_summaries, plot_demographic_smry_comp, .caption = &quot;Arab Barometer Wave VI, Survey I&quot;) The result is a named list of plots. Each element in the list is a plot. The element is named for the variable it is a plot of. For example, to see the plot for variable Q1COVID19, run the following code: comparative_gender_plots$Q1COVID19 To see the plot for variable Q2061A, run the following code: comparative_gender_plots$Q2061A Finally, to see the plot for variable Q609, run the following code: comparative_gender_plots$Q609 That’s it! The only limit on the number of graphs you can create at once is the time it will take R to make them. The more graphs you try to create at once, the longer it will take. The steps to creating a named variable list are exactly the same as the ones we reviewed in Chapter 1; therefore, we will begin by creating summaries. For a refresher on creating named lists, click here. We will use the same variables as in Chapter 3: Q1COVID19, Q2061A, and Q609. Let’s begin. 5.2.1 Create Summaries The same function used to create a single summary is used to create many summaries: calculate_demographic_smry_comp(). Recall it takes three parameters: (1) the data you are using, (2) the variable(s) you want to plot, and (3) the country you are creating the plot for. Now, instead of one variable, you supply the list of variables. survey1 %&gt;% # Data calculate_demographic_smry_comp(variables_2_plot) # Variables to summarize The above code produces a nested named list. Each element in the list is another named list. Each element in the outer list is named for a variable you want to create summaries for. The inner list of each element is a summary with the data grouped by age, gender, income, and education. You can think of it like the following bullet point list: calculate_demographic_smry_comp output Q1COVID19 age Q1COVID19 summary grouped by age gender Q1COVID19 summary grouped by gender income Q1COVID19 summary grouped by income education Q1COVID19 summary grouped by education Q2061A age Q2061A summary grouped by age gender Q2061A summary grouped by gender income Q2061A summary grouped by income education Q2061A summary grouped by education Q609 age Q609 summary grouped by age gender Q609 summary grouped by gender income Q609 summary grouped by income education Q609 summary grouped by education For this example, we will again only be focusing on gender plots. To get only gender summaries, just specify the .dem parameter. survey1 %&gt;% # Data calculate_demographic_smry_comp(variables_2_plot, # Variables to summarize .dem = &quot;gender&quot;) # Demographic Now, the output of this function looks like this bullet point list: calculate_demographic_smry_comp(.dem=\"gender\") output Q1COVID19 gender Q1COVID19 summary grouped by gender Q2061A gender Q2061A summary grouped by gender Q609 gender Q609 summary grouped by gender Much more manageable . Let’s save this outcome as an object and move on to plotting. comparative_gender_summaries &lt;- survey1 %&gt;% calculate_demographic_smry_comp(variables_2_plot, .dem = &quot;gender&quot;) 5.2.2 Plot the Summaries Again, the same function to create one plot is used to create many plots: plot_demographic_smry_comp(). Just like in Chapter 3, we need to use the map function. In this case, you supply the list of summaries you just created, and the plot_demographic_sumry_comp() function. The code follows: map( comparative_gender_summaries, # List of summaries plot_demographic_smry_comp # Plotting function ) The code produces the following output: map( comparative_gender_summaries, # List of summaries plot_demographic_smry_comp # Plotting function ) ## $Q1COVID19 ## ## $Q2061A_1 ## ## $Q609 Notice, yet again, the caption needs to be changed. To change the caption for all the graphs, just add one line to the map function. map( comparative_gender_summaries, # List of summaries plot_demographic_smry_comp, # Plotting function .caption = &quot;Arab Barometer Wave VI, Survey I&quot; # Caption ) ## $Q1COVID19 ## ## $Q2061A_1 ## ## $Q609 Congratulations! You have created three plots at once. You can store them in as a single list and call them one at a time. comparative_gender_plots &lt;- map( comparative_gender_summaries, # List of summaries plot_demographic_smry_comp, # Plotting function .caption = &quot;Arab Barometer Wave VI, Survey I&quot; # Caption ) Now, all three plots have been stored in a named list named comparative_gender_plots. To look at the first plot: comparative_gender_plots$Q1COVID19 To see the plot for variable Q2061A, run the following code: comparative_gender_plots$Q2061A Finally, to see the plot for variable Q609, run the following code: comparative_gender_plots$Q609 You have now completed all steps in the example code. Congrats! If the style of this code is confusing, see Create a Summary in Chapter 1↩︎ "],["chapter-5.html", "Chapter 6 Single Country Trend Graphs 6.1 Create Single Trend Graph 6.2 Create Many Graphs", " Chapter 6 Single Country Trend Graphs This chapter will cover how to create trend graphs for one country. Prior to his, we have only used a single data set, survey1. We will now also use the data sets survey2 and survey3. Refer to the assumed header code to see where survey1, survey2, and survey3 came from. 6.1 Create Single Trend Graph At the end, your code will look like the following: df_list &lt;- list( survey1, survey2, survey3 ) survey_dates &lt;- c(&quot;Survey 1 Year&quot;, &quot;Survey 2 Year&quot;, &quot;Survey 3 Year&quot;) plot_trend_individual(&quot;Q1COVID19&quot;, df_list, survey_dates, &quot;Algeria&quot;, .caption = &quot;Arab Barometer Wave VI, Algeria&quot;) The code produces this graph: Let’s go! 6.1.1 Prep Work Unlike other graphs in other chapters, the user does not create a summary for a trend graph. There is only one function to use: plot_trend_individual(). You can create the plot all in one step with the function, but it is prudent to do a little prep work before hand. This makes your work more clear and your life easier down the line. Create a Data Frame List The first step is to create a list of data frames. There should be one data frame for each period you wish to graph. That is, each data frame should be from a different survey you want to include in your graph. In the example for the chapter, we’re using the three surveys from Wave VI, which we call survey1, survey2, and survey3. Each survey is its own data frame. df_list &lt;- list( survey1, survey2, survey3 ) The list of data frames should be in the order you want them to appear (ideally, chronologically). The data on the graph will show up in the order of the list. So if you create a list in the order list(survey2, survey1, survey3), the data from survey2 will show up before the data from survey1. Please note: This is ambivalent to language! The plot_trend_individual() function will assume the order of the list is the correct order, and treat it accordingly. When you enter a list as list(survey1, survey2, surveye3), the English graph will show the data right to left (survey 1 -&gt; survey 2 -&gt; survey 3), while the Arabic graph will show the data left to right (survey 3 &lt;- survey 2 &lt;- survey 1). You do not need to alter your input. Create a Date Vector The next step is to create a vector of the dates you want to show on the x-axis of your graph. Branding guidelines call for the years in which the survey took place. For simplicity in the example, let’s just say \"Survey X Year\". You need a date for each data frame in your data frame list. Otherwise, the function won’t know how to label the x-axis. survey_dates &lt;- c(&quot;Survey 1 Year&quot;, &quot;Survey 2 Year&quot;, &quot;Survey 3 Year&quot;) The dates should also be in the order you want them to appear. The dates should line up with the data frames. In the chapter example, the order of the data frames is survey 1, survey 2, survey 3. Therefore, the survey dates need to have the order survey 1 year, survey 2 year, survey 3 year. Please note: This is ambivalent to language! Just as with the data frame list, the plot_trend_individual() function will put the data in the correct order according to the language of the graph. Now that we have defined our data frame list and survey dates, we can create our trend plot. 6.1.2 Plot a Trend Graph To create a trend graph plot for an individual country, use the plot_trend_individual() function. This function takes a few more parameters, and in a different order, than the functions we have worked with so far. In total, there are four necessary parameters: .var, data_frames, svry_dates, and select_country. To see a complete list of parameters, including optional ones, use ?plot_trend_individual() in your R console. The parameter .var is the variable you want to plot. It must have the same name in every data frame in the data frame list. If the variable you want to plot is named \"Q101\" in one sure, but \"Q102\" in another, the function will not include \"Q102\" in the plot. Computers can do a lot but as of yet they cannot think critically, so the onus is on you. The parameter data_frames is a list of data frames. This is what we created here. The parameter svry_dates is a character vector of dates that will show up on the x-axis of the graph. This is what we created here. The parameter select_country is the name of the country you want to create the graph for. Now let’s fill it in. plot_trend_individual(.var = &quot;Q1COVID19&quot;, # Variable to graph data_frames = df_list, # List of data frames svry_dates = survey_dates, # Vector of survey dates select_country = &quot;Algeria&quot;) # Country to graph Nearly there! What still needs to be changed? The caption, of course! Just as in all the other plot_ functions in the ArabBarometR package, you can change the caption using the .caption parameter. plot_trend_individual(.var = &quot;Q1COVID19&quot;, data_frames = df_list, svry_dates = survey_dates, select_country = &quot;Algeria&quot;, .caption = &quot;Arab Barometer Wave VI, Algeria&quot;) Putting all the steps together, we have the code and graph we originally started with. df_list &lt;- list( survey1, survey2, survey3 ) survey_dates &lt;- c(&quot;Survey 1 Year&quot;, &quot;Survey 2 Year&quot;, &quot;Survey 3 Year&quot;) plot_trend_individual(&quot;Q1COVID19&quot;, df_list, survey_dates, &quot;Algeria&quot;, .caption = &quot;Arab Barometer Wave VI, Algeria&quot;) 6.2 Create Many Graphs A nice payoff of creating the data frame list and the date vector is that these objects (df_list and survey_dates) can be re-used any time you want to create a graph over the same time period. For example, say you wanted to also create a graph tracking Algerian’s views of the economy and religiosity. The only parameter in the plot_trend_individual() function that needs updating is .var. df_list &lt;- list( survey1, survey2, survey3 ) survey_dates &lt;- c(&quot;Survey 1 Year&quot;, &quot;Survey 2 Year&quot;, &quot;Survey 3 Year&quot;) plot_trend_individual(&quot;Q1COVID19&quot;, df_list, survey_dates, &quot;Algeria&quot;, .caption = &quot;Arab Barometer Wave VI, Algeria&quot;) plot_trend_individual(&quot;Q101&quot;, df_list, survey_dates, &quot;Algeria&quot;, .caption = &quot;Arab Barometer Wave VI, Algeria&quot;) plot_trend_individual(&quot;Q609&quot;, df_list, survey_dates, &quot;Algeria&quot;, .caption = &quot;Arab Barometer Wave VI, Algeria&quot;) Notice that the code produced two graphs, even though df_list and survey_dates were only defined one time. Once you have created the df_list and survey_dates objects, you can re-use them for any graph that is covering the same time period. You can also you the map() function from the purrr package. This method is similar to what was done for creating many single country graphs, many single country demographic graphs, many comparative graphs, and many comparative demographic graphs. As a quick review, in earlier chapters the first step was identify the variables to plot. We did that by creating a named list of of the variables we wanted to plot. The second step was creating a list of summaries by give the summarize function the named variable list. The third and final step was mapping that list of summaries to the related plot function. In the mapping function, we would hold the caption constant since we wanted the same caption to appear on every graph. The plot_trend_individual() function creates summaries internally, so we can “skip” the second step. Once we identify our variables, we go right to the mapping step. We map a named list of variables to the plot_trend_individual() function. We want to create a graph for the same country over the same time period, just using different variable, so we hold the data frame list, survey dates, country, and caption constant. 6.2.1 Identify the Variables We are creating trend graphs for the variables Q1COVID19, Q101, and Q609. variables_2_plot &lt;- list(&quot;Q1COVID19&quot;, &quot;Q101&quot;, &quot;Q609&quot;) names(variables_2_plot) &lt;- c(&quot;Q1COVID19&quot;, &quot;Q101&quot;, &quot;Q609&quot;) Now you have a names list of variables. Let’s plot them. 6.2.2 Plot the Variables Recall we want to hold constant the data_frames, svry_dates, select_country and .caption parameters because those will be the same for every graph. The only parameter we want to vary is .var. plots &lt;- map( variables_2_plot, # Vector of variables to plot plot_trend_individual, # Map to function `plot_trend_individual()` data_frames = df_list, # Hold constant the `data_frames` parameter svry_dates = survey_dates, # Hold constant the `svry_dates` parameter select_country = &quot;Algeria&quot;, # Hold constant the `select_country` parameter .caption = &quot;Arab Barometer Wave VI, Algeria&quot; ) Excellent! The plots have been saved to a named list called plots. To access the plots for each variable, you can use the $ and variable name. # Trend graph for Q1COVID19 plots$Q1COVID19 # Trend graph for Q101 plots$Q101 # Trend graph for Q609 plots$Q609 You’ve done it! You have created many trend plots at once! "],["chater-6.html", "Chapter 7 Single Country Demographic Trend Graphs 7.1 Create Single Demographic Trend Graph 7.2 Create Many Graphs", " Chapter 7 Single Country Demographic Trend Graphs 7.1 Create Single Demographic Trend Graph At the end, your code will look like the following: df_list &lt;- list( survey1, survey2, survey3 ) survey_dates &lt;- c(&quot;Survey 1&quot;, &quot;Survey 2&quot;, &quot;Survey 3&quot;) plot_trend_individual_demographics(&quot;Q1COVID19&quot;, &quot;gender&quot;, df_list, survey_dates, &quot;Algeria&quot;, .caption = &quot;Arab Barometer Wave VI, Algeria&quot;) The code produces this graph: Hopefully you notice how similar this code is to the code in Chapter 5. The only difference here is that the user must include a line specifying the demographic. 7.1.1 Prep Work Unlike other graphs in other chapters, the user does not create a summary for a trend graph. There is only one function to use: plot_trend_individual_demographics(). You can create the plot all in one step with the function, but it is prudent to do a little prep work before hand. This makes your work more clear and your life easier down the line. Create a Data Frame List The first step is to create a list of data frames. This section is exactly the same as the one from here. There should be one data frame for each period you wish to graph. That is, each data frame should be from a different survey you want to include in your graph. In the example for the chapter, we’re using the three surveys from Wave VI, which we call survey1, survey2, and survey3. Each survey is its own data frame. df_list &lt;- list( survey1, survey2, survey3 ) The list of data frames should be in the order you want them to appear (ideally, chronologically). The data on the graph will show up in the order of the list. So if you create a list in the order list(survey2, survey1, survey3), the data from survey2 will show up before the data from survey1. Please note: This is ambivalent to language! The plot_trend_individual_demographics() function will assume the order of the list is the correct order, and treat it accordingly. When you enter a list as list(survey1, survey2, surveye3), the English graph will show the data right to left (survey 1 -&gt; survey 2 -&gt; survey 3), while the Arabic graph will show the data left to right (survey 3 &lt;- survey 2 &lt;- survey 1). You do not need to alter your input. Create a Date Vector This section is exactly the same as the one from here. The next step is to create a vector of the dates you want to show on the x-axis of your graph. Branding guidelines call for the years in which the survey took place. For simplicity in the example, let’s just say \"Survey X Year\". You need a date for each data frame in your data frame list. Otherwise, the function won’t know how to label the x-axis. survey_dates &lt;- c(&quot;Survey 1 Year&quot;, &quot;Survey 2 Year&quot;, &quot;Survey 3 Year&quot;) The dates should also be in the order you want them to appear. The dates should line up with the data frames. In the chapter example, the order of the data frames is survey 1, survey 2, survey 3. Therefore, the survey dates need to have the order survey 1 year, survey 2 year, survey 3 year. Please note: This is ambivalent to language! Just as with the data frame list, the plot_trend_individual_demographics() function will put the data in the correct order according to the language of the graph. Now that we have defined our data frame list and survey dates, we can create our demographic trend plot. 7.1.2 Plot a Demographic Trend Graph To create a trend graph plot for an individual country, use the plot_trend_individual_demographics() function. This function takes a few more parameters, and in a different order, than the functions we have worked with so far. In total, there are five necessary parameters: .var, .dem, data_frames, svry_dates, and select_country. To see a complete list of parameters, including optional ones, use ?plot_trend_individual_demographics() in your R console. The parameter .var is the variable you want to plot. It must have the same name in every data frame in the data frame list. If the variable you want to plot is named \"Q101\" in one sure, but \"Q102\" in another, the function will not include \"Q102\" in the plot. Computers can do a lot but as of yet they cannot think critically, so the onus is on you. The parameter .dem is the demographic you want to see the variable trends for. Much like the .var parameter, it must have the same name in every data frame in the data frame list. If the demographic you want to plot is named \"gender\" in one sure, but \"GENDER\" in another, the function will break. The parameter data_frames is a list of data frames. This is what we created here. The parameter svry_dates is a character vector of dates that will show up on the x-axis of the graph. This is what we created here. The parameter select_country is the name of the country you want to create the graph for. Now let’s fill it in. plot_trend_individual_demographics(.var = &quot;Q1COVID19&quot;, # Variable to graph .dem = &quot;gender&quot;, # Demographic to see over time data_frames = df_list, # List of data frames svry_dates = survey_dates, # Vector of survey dates select_country = &quot;Algeria&quot;) # Country to graph Nearly there! What still needs to be changed? The caption, of course! Just as in all the other plot_ functions in the ArabBarometR package, you can change the caption using the .caption parameter. plot_trend_individual_demographics(.var = &quot;Q1COVID19&quot;, .dem = &quot;gender&quot;, data_frames = df_list, svry_dates = survey_dates, select_country = &quot;Algeria&quot;, .caption = &quot;Arab Barometer Wave VI, Algeria&quot;) Putting all the steps together, we have the code and graph we originally started with. df_list &lt;- list( survey1, survey2, survey3 ) survey_dates &lt;- c(&quot;Survey 1 Year&quot;, &quot;Survey 2 Year&quot;, &quot;Survey 3 Year&quot;) plot_trend_individual_demographics(&quot;Q1COVID19&quot;, &quot;gender&quot;, df_list, survey_dates, &quot;Algeria&quot;, .caption = &quot;Arab Barometer Wave VI, Algeria&quot;) 7.2 Create Many Graphs A nice payoff of creating the data frame list and the date vector is that these objects (df_list and survey_dates) can be re-used any time you want to create a graph over the same time period. For example, say you wanted to also create a graph tracking Algerian’s views of the economy and religiosity. The only parameter in the plot_trend_individual_demographics() function that needs updating is .var. df_list &lt;- list( survey1, survey2, survey3 ) survey_dates &lt;- c(&quot;Survey 1 Year&quot;, &quot;Survey 2 Year&quot;, &quot;Survey 3 Year&quot;) plot_trend_individual_demographics(&quot;Q1COVID19&quot;, &quot;gender&quot;, df_list, survey_dates, &quot;Algeria&quot;, .caption = &quot;Arab Barometer Wave VI, Algeria&quot;) plot_trend_individual_demographics(&quot;Q101&quot;, &quot;gender&quot;, df_list, survey_dates, &quot;Algeria&quot;, .caption = &quot;Arab Barometer Wave VI, Algeria&quot;) plot_trend_individual_demographics(&quot;Q609&quot;, &quot;gender&quot;, df_list, survey_dates, &quot;Algeria&quot;, .caption = &quot;Arab Barometer Wave VI, Algeria&quot;) Notice that the code produced two graphs, even though df_list and survey_dates were only defined one time. Once you have created the df_list and survey_dates objects, you can re-use them for any graph that is covering the same time period. You can also you the map() function from the purrr package. This method is similar to what was done for creating many single country graphs, many single country demographic graphs, many comparative graphs, and many comparative demographic graphs. As a quick review, in earlier chapters the first step was identify the variables to plot. We did that by creating a named list of of the variables we wanted to plot. The second step was creating a list of summaries by give the summarize function the named variable list. The third and final step was mapping that list of summaries to the related plot function. In the mapping function, we would hold the caption constant since we wanted the same caption to appear on every graph. The plot_trend_individual_demographics() function creates summaries internally, so we can “skip” the second step. Once we identify our variables, we go right to the mapping step. We map a named list of variables to the plot_trend_individual_demographics() function. We want to create a graph for the same country over the same time period, just using different variable, so we hold the demographic, data frame list, survey dates, country, and caption constant. 7.2.1 Identify the Variables We are creating trend graphs for the variables Q1COVID19, Q101, and Q609. variables_2_plot &lt;- list(&quot;Q1COVID19&quot;, &quot;Q101&quot;, &quot;Q609&quot;) names(variables_2_plot) &lt;- c(&quot;Q1COVID19&quot;, &quot;Q101&quot;, &quot;Q609&quot;) Now you have a names list of variables. Let’s plot them. 7.2.2 Plot the Variables Recall we want to hold constant the data_frames, svry_dates, select_country and .caption parameters because those will be the same for every graph. The only parameter we want to vary is .var. plots &lt;- map( variables_2_plot, # Vector of variables to plot plot_trend_individual_demographics, # Map to function `plot_trend_individual_demographics()` .dem = &quot;gender&quot;, # Hold constant the `.dem` parameter data_frames = df_list, # Hold constant the `data_frames` parameter svry_dates = survey_dates, # Hold constant the `svry_dates` parameter select_country = &quot;Algeria&quot;, # Hold constant the `select_country` parameter .caption = &quot;Arab Barometer Wave VI, Algeria&quot; ) Excellent! The plots have been saved to a named list called plots. To access the plots for each variable, you can use the $ and variable name. # Trend graph for Q1COVID19 plots$Q1COVID19 # Trend graph for Q101 plots$Q101 # Trend graph for Q609 plots$Q609 You’ve done it! You have created many trend plots at once! "],["bare-bones-comparative-country-trend-graphs.html", "Chapter 8 BARE BONES: Comparative Country Trend Graphs 8.1 Create Comparative Trend Graph", " Chapter 8 BARE BONES: Comparative Country Trend Graphs 8.1 Create Comparative Trend Graph At the end, your code will look like the following: df_list &lt;- list( survey1, survey2, survey3 ) survey_dates &lt;- c(&quot;Survey 1&quot;, &quot;Suvey 2&quot;, &quot;Survey 3&quot;) plot_trend_comp(&quot;Q1COVID19&quot;, df_list, survey_dates) The code produces this graph: "],["bare-bones-comparative-country-demographic-trend-graphs.html", "Chapter 9 BARE BONES: Comparative Country Demographic Trend Graphs 9.1 Create Comparative Demographic Trend Graph", " Chapter 9 BARE BONES: Comparative Country Demographic Trend Graphs 9.1 Create Comparative Demographic Trend Graph At the end, your code will look like the following: df_list &lt;- list( survey1, survey2, survey3 ) survey_dates &lt;- c(&quot;Survey 1&quot;, &quot;Suvey 2&quot;, &quot;Survey 3&quot;) # One plot per Country plot_trend_comp_demographics(&quot;Q1COVID19&quot;, df_list, &quot;gender&quot;, survey_dates, &quot;Country&quot;) # One plot per demographic plot_trend_comp_demographics(&quot;Q1COVID19&quot;, df_list, &quot;gender&quot;, survey_dates, &quot;demographic&quot;) The code produces this graphs: ## `geom_line()`: Each group consists of only one observation. ## ℹ Do you need to adjust the group aesthetic? "],["stacked-plots.html", "Chapter 10 Stacked Plots 10.1 Create a Single Graph 10.2 Create Many Graphs 10.3 Extras", " Chapter 10 Stacked Plots Stacked bar graphs are very useful for displaying responses to nominal questions across countries. Unlike the graphs from Chapter 4, which can only compare one nominal category at a time across countries, a stacked bar graph allows the user to show the breakdown of responses to every category for each country. At the end, your code will look like the following: calculate_stacked_df(survey1, &quot;Q2061A&quot;) |&gt; plot_stacked_comp(.caption = &quot;Arab Barometer Wave VI, Survey 1&quot;) That code will produce the following graph: Let’s go! 10.1 Create a Single Graph 10.1.1 Create a Summary As usual, the first step to creating a stacked bar graph is to summarize the data you want to display. To do this you use the calculate_stacked_df() function. This function requires two arguments: (1) an Arab Barometer data frame, and (2) the name of the variable you want to graph. For this example, we’ll use the first survey of wave six and question Q2061A. calculate_stacked_df( .ab = survey1, # Data Frame .var = &quot;Q2061A&quot; # Variable Name ) ## # A tibble: 54 × 3 ## # Groups: Country [6] ## Q2061A Country Percent ## &lt;dbl+lbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 [Economic situation] Algeria 28 ## 2 2 [Corruption] Algeria 7 ## 3 6 [Instability] Algeria 4 ## 4 7 [Foreign interference] Algeria 2 ## 5 12 [Public services] Algeria 1 ## 6 15 [COVID-19] Algeria 52 ## 7 16 [Other] Algeria 4 ## 8 17 [Beirut port explosion] Algeria 0 ## 9 666 [Don&#39;t know/Refuse] Algeria 2 ## 10 1 [Economic situation] Jordan 41 ## # … with 44 more rows The data frame is quite long, as it contains the response of every category for every country. Let’s save it to an object we can graph in the next section. stacked_data_frame &lt;- calculate_stacked_df( .ab = survey1, .var = &quot;Q2061A&quot; ) 10.1.2 Plot the Summary Now that we have the data frame, the next step is to plot it. For this step we use the function plot_stacked_comp(). The only required input is a data frame. plot_stacked_comp(stacked_data_frame) Similar to many other plots in this guide, the caption is not automatically correct. Even though the data frame is the only required input, it is highly advised about correct the caption. Like always, this is done using the .caption parameter. plot_stacked_comp(stacked_data_frame, .caption = &quot;Arab Barometer Wave VI, Survey 1&quot;) We can use the pipe operator5 to chain everything together. calculate_stacked_df(survey1, &quot;Q2061A&quot;) |&gt; plot_stacked_comp(.caption = &quot;Arab Barometer Wave VI, Survey 1&quot;) This code produces the graph we started with! 10.2 Create Many Graphs Normally, stacked graphs tend to be one-offs, but on the off chance you need to make many of them, you can, with the help of the purrr package. The steps follow. Create an iterable object (read: list or vector) of variable you want to graph. Map your object onto the calculate_stacked_df() function to create a list of summaries. Map your list of summaries onto the plot_stacked_comp() function to create a list of plots. To be clear, there are many, many different ways to create code to accomplish the goal of creating many graphs at one time. The method suggested here is only one. 10.2.1 Identify the Variables The first step to create many graphs is to identify all the variables you want to make graphs for. For this example, we’ll use Q2061A, Q118, and Q516A. We will save it to an object we can map to plot_stacked_comp(). variables_2_plot &lt;- c(&quot;Q2061A&quot;, &quot;Q118&quot;, &quot;Q516A&quot;) We have save a vector of our three variables to an object called variables_2_plot. Next step is creating the summaries. 10.2.2 Create Many Summaries The next step is to use the map() function from the purrr package to create a list of summaries. The map() function requires two arguments: (1) an iterable object (e.g., a list or vector), and (2) a function. In the case, our iterable object is variables_2_plot and our function is calculate_stacked_df(). summary_list &lt;- map( variables_2_plot, # List of variables calculate_stacked_df # Function to map onto ) ## Error in `map()`: ## ℹ In index: 1. ## Caused by error in `.ab[[.var]]`: ## ! subscript out of bounds Oops. What went wrong? Take a moment to guess. Did you guess that calculate_stacked_df() takes two arguments and only one is provided here? If so, you are correct! The above code does not provide the data calculate_stacked_df() needs to create the data frame; specially survey1. The data used to create these summaries is the same every time. That means even though we are changing the variables we want to create summaries for, we can hold the input data constant. You can do this in the map() function by including the name of the parameter you want to hold constant, and setting it equal to your constant input. The map() function knows to use that input for every variable. summary_list &lt;- map( variables_2_plot, # List of variables calculate_stacked_df, # Function to map onto .ab = survey1 # Constant parameter ) Unlike the list produced produced when we created many summaries for single country overall plots, this list of summaries is not named. The list has three elements (one for each variable) called \"1\", \"2\", and \"3\". While not strictly necessary, it is useful to provide names for referencing later. Luckily, if you saved the names of the variables as a vector, you can set that vector as the names of the elements in the summary list6. names(summary_list) &lt;- variables_2_plot Now, you can look at each variable’s summary by referencing the variable name. summary_list$Q2061A ## # A tibble: 54 × 3 ## # Groups: Country [6] ## Q2061A Country Percent ## &lt;dbl+lbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 [Economic situation] Algeria 28 ## 2 2 [Corruption] Algeria 7 ## 3 6 [Instability] Algeria 4 ## 4 7 [Foreign interference] Algeria 2 ## 5 12 [Public services] Algeria 1 ## 6 15 [COVID-19] Algeria 52 ## 7 16 [Other] Algeria 4 ## 8 17 [Beirut port explosion] Algeria 0 ## 9 666 [Don&#39;t know/Refuse] Algeria 2 ## 10 1 [Economic situation] Jordan 41 ## # … with 44 more rows summary_list$Q118 ## # A tibble: 42 × 3 ## # Groups: Country [6] ## Q118 Country Percent ## &lt;dbl+lbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 [Create more job opportunities] Algeria 40 ## 2 2 [Raise wages for existing jobs] Algeria 14 ## 3 3 [Lower the cost of living (limiting inflation)] Algeria 15 ## 4 4 [Reform the education system] Algeria 15 ## 5 5 [Encouraging foreign investment] Algeria 10 ## 6 6 [Other] Algeria 5 ## 7 666 [Don&#39;t know/Refuse] Algeria 1 ## 8 1 [Create more job opportunities] Jordan 39 ## 9 2 [Raise wages for existing jobs] Jordan 18 ## 10 3 [Lower the cost of living (limiting inflation)] Jordan 17 ## # … with 32 more rows summary_list$Q516A ## # A tibble: 24 × 3 ## # Groups: Country [6] ## Q516A Country Percent ## &lt;dbl+lbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 [For people like me, it doesn&#39;t matter what kind of government we have] Algeria 9 ## 2 2 [Under some circumstances, a non-democratic government can be preferable] Algeria 18 ## 3 3 [Democracy is always preferable to any other kind of government] Algeria 64 ## 4 666 [Don&#39;t know/Refuse] Algeria 8 ## 5 1 [For people like me, it doesn&#39;t matter what kind of government we have] Jordan 16 ## 6 2 [Under some circumstances, a non-democratic government can be preferable] Jordan 13 ## 7 3 [Democracy is always preferable to any other kind of government] Jordan 59 ## 8 666 [Don&#39;t know/Refuse] Jordan 13 ## 9 1 [For people like me, it doesn&#39;t matter what kind of government we have] Lebanon 22 ## 10 2 [Under some circumstances, a non-democratic government can be preferable] Lebanon 28 ## # … with 14 more rows Excellent. On to plotting. 10.2.3 Create Many Plots Our next step is to take the list of summaries, and map it onto the function plot_stacked_df(). This will create a list of plots. We will save it to an object plot_list. plot_list &lt;- map( summary_list, plot_stacked_comp ) This mapping worked without any extra inputs because plot_stacked_comp() requires only one input. We can also see that the names of summary list carried through. names(plot_list) ## [1] &quot;Q2061A&quot; &quot;Q118&quot; &quot;Q516A&quot; To look at each plot, we can simply call them by name. plot_list$Q2061A plot_list$Q118 plot_list$Q516A Hopefully you notice that just like when we created our first stacked plot with only the stacked data frame as an input, the caption needs to be set. The caption should be the same for every graph here. Since the input is constant, we can set that in the map() function just as we did with the data frame input in the previous section. plot_list &lt;- map( summary_list, plot_stacked_comp, .caption = &quot;Arab Barometer Wave VI, Survey 1&quot; ) Now, all plots should have the same caption. We can verify that by calling each of them. plot_list$Q2061A plot_list$Q118 plot_list$Q516A And there you have it! We have created many stacked plots! All together, the code looks like the following: variables_2_plot &lt;- c(&quot;Q2061A&quot;, &quot;Q118&quot;, &quot;Q516A&quot;) summary_list &lt;- map( variables_2_plot, calculate_stacked_df, .ab = survey1 ) names(summary_list) &lt;- variables_2_plot plot_list &lt;- map( summary_list, plot_stacked_comp, .caption = &quot;Arab Barometer Wave VI, Survey 1&quot; ) 10.3 Extras 10.3.1 Long Legends You may have noticed the legends of many of these plots running off the page. Take the original stacked graph for Q2061A for example. plot_stacked_comp(stacked_data_frame, .caption = &quot;Arab Barometer Wave VI, Survey 1&quot;) Two rows does not seem to be enough to see all the categories in the legend. You can fix that with the guides() function from the ggplot2 package. plot_stacked_comp(stacked_data_frame, .caption = &quot;Arab Barometer Wave VI, Survey 1&quot;) + guides(fill = guide_legend(nrow = 3)) The input to the guides() function should be thought of as follows: “For the fill legend, use three rows.” You can change the number as you see fit. 10.3.2 Font Size Another way to get all the text to be visible is to change the font size. You can read how to do that in the chapter on changing the font size. 10.3.3 Colors You can learn how to change the colors for the stacked graph in the chapter on changing graph colors. 10.3.4 Order You can learn how to change the order for a stacked graph in the chapter on changing the order for a stacked graph. To learn more about piping and using %&gt;% in programming, see A Note on Piping in the ArabBarometR guide.↩︎ This only works if the variables are in a vector, not a list↩︎ "],["bare-bones-single-country-stacked-plots.html", "Chapter 11 BARE BONES: Single Country Stacked Plots", " Chapter 11 BARE BONES: Single Country Stacked Plots At the end, your code will look like the following: plot_stacked_general(survey1, &quot;Algeria&quot;, Q2061A, Q609, .title = &quot;Most pressing concern in Algeria by religiosity&quot;, .subtitle = &quot;% saying&quot;, .caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot;) That code will produce the following graph: Let’s go! "],["bare-bones-single-country-multi-question-plots.html", "Chapter 12 BARE BONES: Single Country Multi-Question Plots", " Chapter 12 BARE BONES: Single Country Multi-Question Plots At the end, your code will look like the following: questions_2_compare &lt;- list(&quot;Q210&quot;, &quot;Q211&quot;) questions_labels &lt;- c(&quot;Is there corruption?&quot;, &quot;Is the gov&#39;t cracking down?&quot;) plot_multiquestions_ind(survey1, questions_2_compare, questions_labels, &quot;Algeria&quot;, .title = &quot;Perceptions of Corruption in Algeria&quot;, .subtitle = &quot;% saying to a medium or large extent&quot;, .caption = &quot;Arab Barometer Wave VI, Survey 1, Algeria&quot;) That code will produce the following graph: Let’s go! "],["bare-bones-comparative-multi-question-plots.html", "Chapter 13 BARE BONES: Comparative Multi-Question Plots", " Chapter 13 BARE BONES: Comparative Multi-Question Plots At the end, your code will look like the following: questions_2_compare &lt;- list(&quot;Q210&quot;, &quot;Q211&quot;) questions_labels &lt;- c(&quot;Is there corruption?&quot;, &quot;Is the gov&#39;t cracking down?&quot;) plot_multiquestions_comp(survey1, questions_2_compare, questions_labels, .title = &quot;Perceptions of Corruption in MENA&quot;, .subtitle = &quot;% saying to a medium or large extent&quot;, .caption = &quot;Arab Barometer Wave VI, Survey 1&quot;) That code will produce the following graph: Let’s go! "],["bare-bones-comparative-grid-plots.html", "Chapter 14 BARE BONES: Comparative Grid Plots", " Chapter 14 BARE BONES: Comparative Grid Plots At the end, your code will look like the following: plot_grid_comp(survey1, &quot;Q700B&quot;) That code will produce the following graph: Let’s go! "],["bare-bones-single-country-multi-question-trend-plots.html", "Chapter 15 BARE BONES: Single Country Multi-Question Trend Plots", " Chapter 15 BARE BONES: Single Country Multi-Question Trend Plots At the end, your code will look like the following: questions_2_compare &lt;- list(&quot;Q2061A_1&quot;, &quot;Q2061A_15&quot;) df_list &lt;- list(survey1, survey2, survey3) survey_dates &lt;- c(&quot;Survey 1&quot;, &quot;Survey 2&quot;, &quot;Survey 3&quot;) plot_trend_multiquestion_individual(questions_2_compare, df_list, survey_dates, &quot;Algeria&quot;, legend.names = c(&quot;Economic situtation&quot;,&quot;COVID-19&quot;), .title = &quot;What is the most important challenge facing Algeria today?&quot;, .subtitle = &quot;% saying&quot;, .caption = &quot;Arab Barometer Wave VI, Algeria&quot;) That code will produce the following graph: Let’s go! "],["color-options.html", "Chapter 16 Color Options 16.1 Available Colors 16.2 Available Palettes", " Chapter 16 Color Options 16.1 Available Colors The colors available for graphs come from the Arab Barometer Color Guide. You can see a list of colors with the command: ArabBarometer_clrs ## AB blue AB orange AB magenta AB light blue AB purple AB pink AB yellow ## &quot;#0098BE&quot; &quot;#DF6E21&quot; &quot;#AC517F&quot; &quot;#7CBBC7&quot; &quot;#796391&quot; &quot;#CF83A3&quot; &quot;#FBA950&quot; ## cool grey zeke james bond dark blue medium blue pale green olive green ## &quot;#B1C2CF&quot; &quot;#CCEAF2&quot; &quot;#00718E&quot; &quot;#003D4E&quot; &quot;#4B91B8&quot; &quot;#C8C6A2&quot; &quot;#AAA764&quot; ## copper light bronze bright apple dark watermelon mary clare plumb lilac ## &quot;#AC5410&quot; &quot;#DC9C56&quot; &quot;#FF5E64&quot; &quot;#E42525&quot; &quot;#EAA4A4&quot; &quot;#7F375B&quot; &quot;#B4ADDF&quot; ## bright purple coffee midnight ocean salma almond meat army jacket apricot ## &quot;#5C1C95&quot; &quot;#6F3610&quot; &quot;#004B5E&quot; &quot;#C0E5EE&quot; &quot;#F6DAC7&quot; &quot;#706E3E&quot; &quot;#F7B58B&quot; ## mohamed text grey bright sky bright mauve dark apricot Algeria Egypt ## &quot;#959595&quot; &quot;#545454&quot; &quot;#2CB2CE&quot; &quot;#AD517F&quot; &quot;#E28F57&quot; &quot;#DF6E21&quot; &quot;#00718E&quot; ## Iraq Jordan Kuwait Lebanon Libya Mauritania Morocco ## &quot;#FBA950&quot; &quot;#7F375B&quot; &quot;#706E3E&quot; &quot;#CF83A3&quot; &quot;#003D4E&quot; &quot;#DC9C56&quot; &quot;#7CBBC7&quot; ## Palestine Saudi Arabia Sudan Tunisia Yemen MENA ## &quot;#AC517F&quot; &quot;#1B909F&quot; &quot;#EAA4A4&quot; &quot;#AAA764&quot; &quot;#796391&quot; &quot;#E42525&quot; You’ll notice some colors are repeated with different names (particularly when it comes to countries). This makes some parts of graphing easier internally. The unique colors included in the package are shown below with their hex code. 16.2 Available Palettes The official branding colors have been combined into several color palettes to use with graphs. To see a list of all the (current) palettes, use the following command: AB_palette_options() ## [1] &quot;blue pair&quot; &quot;orange pair&quot; &quot;purple pair&quot; &quot;AB Default&quot; &quot;blue triple&quot; ## [6] &quot;orange triple&quot; &quot;purple triple&quot; &quot;green triple&quot; &quot;mono blue&quot; &quot;mono orange&quot; ## [11] &quot;mono purple&quot; &quot;mono green&quot; &quot;dull rainbow&quot; &quot;cool orange&quot; &quot;blue-orange&quot; ## [16] &quot;cool bright orange&quot; &quot;business man&quot; &quot;pretty cool&quot; &quot;soft rainbow&quot; &quot;warm&quot; ## [21] &quot;purple pink&quot; &quot;stacked&quot; &quot;age&quot; &quot;income&quot; &quot;education&quot; ## [26] &quot;gender&quot; &quot;settlement&quot; &quot;religion&quot; &quot;sect&quot; &quot;region&quot; ## [31] &quot;trend colors&quot; "],["change-colors.html", "Chapter 17 Change Default Colors 17.1 Basic Cross Tabs 17.2 Demographic Cross Tabs 17.3 Stacked Graphs", " Chapter 17 Change Default Colors 17.1 Basic Cross Tabs The parameter is called .clr. This parameter accepts either a color name from ArabBarometR or a hex code. survey1 |&gt; calculate_smry_individual(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) |&gt; plot_smry_individual(.clr = &quot;zeke&quot;) survey1 |&gt; calculate_smry_comp(&quot;Q1COVID19&quot;) |&gt; plot_smry_comp(.clr = &quot;#FF5E64&quot;) 17.2 Demographic Cross Tabs The parameter to change is called .color_palette. This parameter accepts any of the following: \"default\" (which it is set to), the name of an ArabBarometR color palette, a vector of ArabBarometR color names, or a vector of hex codes. If you choose to use a vector of either color names or hex codes, it must be the same length as the number of demographic categories. For example, the gender demographic has two categories, so a vector of custom colors needs to be length two. You can check the number of categories by looking at the data frame you are plotting. survey1 |&gt; calculate_demographic_smry_individual(&quot;Q1COVID19&quot;, &quot;Algeria&quot;, .dem = &quot;gender&quot;) |&gt; plot_demographic_smry_individual(.color_palette = &quot;blue pair&quot;) survey1 |&gt; calculate_demographic_smry_comp(&quot;Q1COVID19&quot;, .dem = &quot;gender&quot;) |&gt; plot_demographic_smry_comp(.color_palette = c(&quot;salma&quot;,&quot;mary clare&quot;)) data_frame_2_plot &lt;- survey1 |&gt; calculate_demographic_smry_comp(&quot;Q1COVID19&quot;, .dem = &quot;Q101&quot;) data_frame_2_plot ## # A tibble: 35 × 3 ## # Groups: Country [6] ## Country Q101 Q1COVID19 ## &lt;chr&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 Algeria Very good 54 ## 2 Algeria Good 73 ## 3 Algeria Bad 72 ## 4 Algeria Very bad 80 ## 5 Algeria Don’t know 38 ## 6 Algeria Refused to answer 0 ## 7 Jordan Very good 70 ## 8 Jordan Good 65 ## 9 Jordan Bad 70 ## 10 Jordan Very bad 52 ## # … with 25 more rows # 6 categories means 6 colors needed data_frame_2_plot |&gt; plot_demographic_smry_comp(.color_palette = c(&quot;#0098BE&quot;, &quot;#DF6E21&quot;, &quot;#AC517F&quot;, &quot;#7CBBC7&quot;, &quot;#796391&quot;, &quot;#CF83A3&quot;)) 17.3 Stacked Graphs The parameter is called .color_palette. The parameter accepts any of the following: the name of an ArabBarometR color palette, a vector of ArabBarometR color names, or a vector of hex codes. If you choose to use a vector of either color names or hex codes, it must be the same length as the number of categories. Recall that the categories “don’t know” and “refuse” are combined into a single category unless otherwise specified. When determining the number of colors you need for your vector, only count the “don’t know” and “refuse” categories as one category. Take Q2061A as an example. In the first survey of wave six, question Q2061A had ten response options including “don’t know” and “refuse”. The calculate_stacked_df() function combines “don’t konw” and “refuse” into one category, so the color palette vector only needs to be length nine. calculate_stacked_df(survey1, &quot;Q2061A&quot;) |&gt; plot_stacked_comp(.caption = &quot;Arab Barometer Wave VI, Survey 1&quot;, .color_palette = &quot;soft rainbow&quot;) calculate_stacked_df(survey1, &quot;Q2061A&quot;) |&gt; plot_stacked_comp(.caption = &quot;Arab Barometer Wave VI, Survey 1&quot;, .color_palette = c(&quot;AB blue&quot;, &quot;AB orange&quot;, &quot;AB magenta&quot;, &quot;AB light blue&quot;, &quot;AB purple&quot;, &quot;AB pink&quot;, &quot;AB yellow&quot;, &quot;zeke&quot;, &quot;pale green&quot;)) "],["highlight-certain-countries.html", "Chapter 18 Highlight Certain Countries 18.1 Single Country Highlight 18.2 Multiple Country Highlight 18.3 Change Highlight Color", " Chapter 18 Highlight Certain Countries 18.1 Single Country Highlight survey1 %&gt;% calculate_smry_comp(&quot;Q1COVID19&quot;) %&gt;% plot_smry_comp(.caption = &quot;Arab Barometer Wave VI, Survey I&quot;, .highlight = &quot;Algeria&quot;) That code will produce the following graph: 18.2 Multiple Country Highlight survey1 %&gt;% calculate_smry_comp(&quot;Q1COVID19&quot;) %&gt;% plot_smry_comp(.caption = &quot;Arab Barometer Wave VI, Survey I&quot;, .highlight = c(&quot;Algeria&quot;,&quot;Jordan&quot;)) That code will produce the following graph: 18.3 Change Highlight Color survey1 %&gt;% calculate_smry_comp(&quot;Q1COVID19&quot;) %&gt;% plot_smry_comp(.caption = &quot;Arab Barometer Wave VI, Survey I&quot;, .highlight = &quot;Algeria&quot;, .highlight_clr = &quot;salma&quot;) That code will produce the following graph: "],["change-font-size.html", "Chapter 19 Change the Font Size", " Chapter 19 Change the Font Size survey1 |&gt; calculate_smry_individual(&quot;Q1COVID19&quot;, .country = &quot;Algeria&quot;) |&gt; plot_smry_individual(.caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot;, theme.title_size = 28, # Changes title size theme.subtitle_size = 14, # Changes subtitle size theme.caption_size = 20, # Changes caption size theme.axis_text_size = 26, # Changes axis text size theme.legend_text_size = 8) # Changes legend text size "],["change-the-titlesubtitlecaption.html", "Chapter 20 Change the Title/Subtitle/Caption", " Chapter 20 Change the Title/Subtitle/Caption survey1 %&gt;% calculate_smry_individual(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) %&gt;% plot_smry_individual(.title = &quot;New title&quot;, .subtitle = &quot;New subtitle&quot;, .caption = &quot;New caption&quot;) "],["select-countries-chp.html", "Chapter 21 Show only certain countries? 21.1 Plots that go with calculate_ functions 21.2 Plots with no calculate_ functions", " Chapter 21 Show only certain countries? 21.1 Plots that go with calculate_ functions survey1 %&gt;% calculate_smry_comp(&quot;Q1COVID19&quot;, select_countries = c(&quot;Morocco&quot;,&quot;Tunisia&quot;)) %&gt;% plot_smry_comp(.caption = &quot;Arab Barometer Wave VI, Survey I&quot;) 21.2 Plots with no calculate_ functions df_list &lt;- list( survey1, survey2, survey3 ) survey_dates &lt;- c(&quot;Survey 1&quot;, &quot;Suvey 2&quot;, &quot;Survey 3&quot;) plot_trend_comp(&quot;Q1COVID19&quot;, df_list, survey_dates, select_countries = c(&quot;Morocco&quot;, &quot;Lebanon&quot;)) "],["order-change-stacked-graphs.html", "Chapter 22 Change the order of a stacked graph?", " Chapter 22 Change the order of a stacked graph? Changing the order of a stacked graph, like creating many graphs at once, is not done within ArabBarometR per se, but the process is relatively straightforward nonetheless. For this example, let’s create a comparative stacked bar chart for Q2ACOVID19. calculate_stacked_df(survey1, &quot;Q2ACOVID19&quot;) |&gt; plot_stacked_comp(.caption = &quot;Original Order&quot;) The order of the bars is determined by the factor level. You can see factor level in the data frame produced by the function calculate_stacked_df. The numbers are the factor levels, the words in brackets are the factor labels. In this example, you can see the factor levels are 1-7 and 666. The factor labels are the question response options. calculate_stacked_df(survey1, &quot;Q2ACOVID19&quot;) ## # A tibble: 48 × 3 ## # Groups: Country [6] ## Q2ACOVID19 Country Percent ## &lt;dbl+lbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 [Family member illness or death] Algeria 32 ## 2 2 [Loss of household income] Algeria 2 ## 3 3 [Negative impact on economy] Algeria 10 ## 4 4 [Healthcare system can&#39;t handle] Algeria 17 ## 5 5 [Inadequate gov.&#39;t response] Algeria 6 ## 6 6 [Citizens not following recommendations] Algeria 30 ## 7 7 [Other] Algeria 3 ## 8 666 [Don&#39;t know/Refuse] Algeria 0 ## 9 1 [Family member illness or death] Jordan 31 ## 10 2 [Loss of household income] Jordan 6 ## # … with 38 more rows Instead of leading with “Illness or death of a family member”, say we want to lead with “Inadequate gov.t response”. We need to change the factor levels. First, we’ll save the output of calculate_stacked_df to an object we can manipulate. new_df &lt;- calculate_stacked_df(survey1, &quot;Q2ACOVID19&quot;) To change the factor levels, we’ll use the recode function from the dplyr library. There are several ways you can use the recode function to re-order the factor levels. This guide will review two, and you can explore the rest on your own. Move One Factor If the goal is to move “Inadequate gov.t response”, whose factor level is 5, in front of “Illness or death of a family member”, whose factor level is 1, we have to choose a new factor level that comes before 1. There are infinite numbers before 1, so we’ll just go with 0.5 here. new_df$Q2ACOVID19 &lt;- dplyr::recode( new_df$Q2ACOVID19, # The variable getting recoded `5` = .5, # The old value to new value .default = levels(new_df$Q2ACOVID19), # Use the original levels as a guide .combine_value_labels = T # Keep the original levels for all other variables ) We can see the new value of the factor. ## # A tibble: 48 × 3 ## # Groups: Country [6] ## Q2ACOVID19 Country Percent ## &lt;dbl+lbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 [Family member illness or death] Algeria 32 ## 2 2 [Loss of household income] Algeria 2 ## 3 3 [Negative impact on economy] Algeria 10 ## 4 4 [Healthcare system can&#39;t handle] Algeria 17 ## 5 0.5 [Inadequate gov.&#39;t response] Algeria 6 ## 6 6 [Citizens not following recommendations] Algeria 30 ## 7 7 [Other] Algeria 3 ## 8 666 [Don&#39;t know/Refuse] Algeria 0 ## 9 1 [Family member illness or death] Jordan 31 ## 10 2 [Loss of household income] Jordan 6 ## # … with 38 more rows And now when we plot the recoded data frame. new_df |&gt; plot_stacked_comp(.caption = &quot;New Order, Option 1&quot;) Swap Factors An alternative way to move “Inadequate gov.t response” to the front is to swap positions with “Illness or death of a family member”. That is, make “Inadequate gov.t response” factor level 1 and “Illness or death of a family member” factor level 5. Again, we use recode from dplyr. new_df$Q2ACOVID19 &lt;- dplyr::recode( new_df$Q2ACOVID19, # The variable getting recoded `5` = 1, # The old value to new value `1` = 5, # The old value to new value .default = levels(new_df$Q2ACOVID19), # Use the original levels as a guide .combine_value_labels = T # Keep the original levels for all other variables ) The new factor levels are: ## # A tibble: 48 × 3 ## # Groups: Country [6] ## Q2ACOVID19 Country Percent ## &lt;dbl+lbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 5 [Family member illness or death] Algeria 32 ## 2 2 [Loss of household income] Algeria 2 ## 3 3 [Negative impact on economy] Algeria 10 ## 4 4 [Healthcare system can&#39;t handle] Algeria 17 ## 5 1 [Inadequate gov.&#39;t response] Algeria 6 ## 6 6 [Citizens not following recommendations] Algeria 30 ## 7 7 [Other] Algeria 3 ## 8 666 [Don&#39;t know/Refuse] Algeria 0 ## 9 5 [Family member illness or death] Jordan 31 ## 10 2 [Loss of household income] Jordan 6 ## # … with 38 more rows Finally, we plot the new data frame. new_df |&gt; plot_stacked_comp(.caption = &quot;New Order, Option 2&quot;) The main take away here is that if you want to play around with the order of a stacked bar graph, it is best to familiarize yourself with recode. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
