[["index.html", "ArabBarometR Graphing Guide Introduction Purpose General Guide Process Example Data Header Code", " ArabBarometR Graphing Guide MaryClare Roche 2022-01-18 Introduction Purpose This guide is meant to give instructions on how to create graphs using the ArabBarometR package. This guide does not cover everything the ArabBarometR package can do, particularly with respect to cleaning data. For a more extensive guide, please visit the general ArabBarometer Guide. This guide was created using the bookdown package, which comes with many fun and useful features. An overview of these features can be found in the Guide Features section in the general ArabBarometR Guide. As such, this guide assumes a few things: That you have the ArabBarometR package installed on your machine. If this is not true, please take a look at this chapter in the general ArabBarometR Guide. You have a basic understanding of how to load data and packages in R. If this is not true, you can pursue either this guide or this website. General Guide Process Assuming we are working with clean data, the graphs are created in two steps: Create a summary of the data you want to graph. Graph that summary. For each type of graph, the guide will first go through how to create one graph, then how to create many graphs. Example Data The examples in this guide will be created using data from Wave VI. For single survey graphs, it will use data from from Wave VI, Survey I. For trend graphs, it will use data from Wave VI, Survey I, II, and III, where Survey III is the final survey we conducted in Wave VI. The Wave VI data can be found on the Arab Barometer Github or the Arab Barometer website. Header Code The code examples in this guide will only focus on how to create graphs. It assumes your R file begins with the following code: setwd(&quot;/Path/to/Folder/with/Data&quot;) library(ArabBarometR) survey1 &lt;- haven::read.dta(&quot;Wave6Survey1.dta&quot;) survey2 &lt;- haven::read.dta(&quot;Wave6Survey2.dta&quot;) survey3 &lt;- haven::read.dta(&quot;Wave6Survey3.dta&quot;) In this code example “/Path/to/Folder/with/Data” is the path to where you are saving your work that also contains your data. This is best practice. For more on folders/working directories, see Section 1.1.2 in the general Arab Barometer Guide. Wave6SurveyX.dta in the above code example is a placeholder for whatever you have named the survey data for Surveys I, II, and III from Wave VI. If you read in the data (using the haven::read.dta() function) and save it as survey1, survey2, and survey3, you should be able to copy and paste the code in this guide exactly as is and run it in your own R session. This guide does not go over how to clean the data. For more on how to use the ArabBarometR package to clean Arab Barometer data, please see Chapter 5 Preparing the Data in the general ArabBarometR Guide. "],["single-country-overall-graphs.html", "Chapter 1 Single Country Overall Graphs 1.1 Create a Single Graph 1.2 Create Many Graphs", " Chapter 1 Single Country Overall Graphs This chapter will cover how to make an overall frequency graph for a single country. 1.1 Create a Single Graph This section will go over how to make a one-off frequency graph for a single country. At the end, your code will look like the following: survey1 %&gt;% calculate_smry_individual(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) %&gt;% plot_smry_individual(.caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot;) That code will produce the following graph: Let’s go! 1.1.1 Create a Summary The first step in creating a plot is to gather the data you want to display and organize it. You do this with the create_smry_individual() function. You can learn more about this function in section 6.1 in the larger ArabBarometR guide. The three main parameters you need to provide to this function are (1) the data you are using, (2) the variable you want to plot, and (3) the country you want to plot it for. To see all the input parameters for the function, type the code ?calculate_smry_individual in your R console. In this example, the variable we want to plot is Q1COVID19 and the country we want to plot it for is Algeria. calculate_smry_individual( .data = survey1, # The data you are using .var = &quot;Q1COVID19&quot;, # The variable you want to plot .country = &quot;Algeria&quot; # The country you want to plot it for ) The above is the same as: calculate_smry_individual(survey1,&quot;Q1COVID19&quot;,&quot;Algeria&quot;) Which is the same as: survey1 %&gt;% calculate_smry_individual(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) The last example uses a pipe, %&gt;%, which comes from the package dplyr, which is automatically loaded by ArabBarometR. To learn more about piping and using %&gt;% in programming, see A Note on Piping in the larger ArabBarometR guide. The output of any of the above expressions is the same: Q1COVID19 Percent 1 28 2 44 3 8 4 20 666 0 This data frame is what we are ultimately graphing. There are few things to note about the summary data frame we just created. First, there are two columns. The first column is named for the question we are graphing. The second column is named Percent. If you want to use the plotting functions in ArabBarometR to graph a summary data frame that is not created by a calculate function (see complete list of calculate functions in the ArabBarometR Guide), the data frame must be structured as two columns with the second column named Percent. Second, you can see that the first column is labeled. The labels come from the responses in the data. If the responses in the data are not labeled, this column will not be labeled. In the next step, plotting, the y-axis labels are taken from these labels. So, if the column is not labeled, the y-axis will just be the values of the column. Let’s store the summary as an object and move on. Q1COVID19_summary &lt;- survey1 %&gt;% calculate_smry_individual(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) 1.1.2 Plot the Summary The next step is plot the summary we just created. To do this, we use the function plot_smry_individual(). You can learn more about this function in section 7.1 of the ArabBarometR Guide. There is only one necessary parameter to use plot_smry_individual(): the summary data frame. For a complete list of acceptable parameters and documentation, you can run ?plot_smry_individual in your R console. Now, we can plug our summary into the plot function: plot_smry_individual( .df = Q1COVID19_summary # The summary data frame ) The above code is the same as: Q1COVID19_summary %&gt;% plot_smry_individual() Which is the SAME as: survey1 %&gt;% calculate_smry_individual(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) %&gt;% plot_smry_individual() We can do this because Q1COVID19_summary is equal to survey1 %&gt;% calculate_smry_individual(\"Q1COVID19\", \"Algeria\"). Any of the above code gives the following graph: Almost done! Notice how the caption says Arab Barometer Wave N (DATE)? Let’s change that. survey1 %&gt;% calculate_smry_individual(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) %&gt;% plot_smry_individual( .caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot; # NEW caption ) Now we have the plot we started with! We’re done! 1.2 Create Many Graphs As a rule of thumb in programming, if you can create something one time, you can create it a bajillion times. This is good because for each wave, Arab Barometer needs approximately a bajillion graphs. To create many graphs at once, there are three steps to follow. First, identify the variables to plot. Second, create summaries of those variables. Third, plot those summaries. At the end of this section, your code will look like the following: #.....................Identify the variables..................... variables_2_plot &lt;- list(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) names(variables_2_plot) &lt;- c(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) #......................Create the summaries...................... summaries &lt;- survey1 %&gt;% calculate_smry_individual(variables_2_plot, &quot;Algeria&quot;) #.......................Plot the summaries....................... plots &lt;- map(summaries, plot_smry_individual, .caption = &quot;Arab Barometer Wave VI, Survey I&quot;) The result is a named list of plots. Each element in the list is a plot. The element is named for the variable it is a plot of. For example, to see the plot for variable Q1COVID19, run the following code: plots$Q1COVID19 To see the plot for variable Q2061A, run the following code: plots$Q2061A Finally, to see the plot for variable Q609, run the following code: plots$Q609 That’s it! The only limit on the number of graphs you can create at once is the time it will take R to make them. The more graphs you try to create at once, the longer it will take. Let’s begin. 1.2.1 Identify the Variables When creating many graphs, you need to tell R which variables you want to make plots of. This is true for when you want to create a single graph as well, but it is much more strongly implied. Plus, the variables must be identified in a specific way. To create many summaries at once, you need to provide your variables in a named list. To create a named list, first make a list of the variables you want to plot. variables_2_plot &lt;- list(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) The next step is to name your list. names(variables_2_plot) &lt;- c(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) Now, you have a named list of variables. Time to summarize them. 1.2.2 Create Summaries The same function used to create a single summary is used to create many summaries: calculate_smry_individual(). Recall it takes three parameters: (1) the data you are using, (2) the variable(s) you want to plot, and (3) the country you are creating the plot for. Now, instead of one variable, you supply the list of variables. calculate_smry_individual( .data = survey1, # The data you are using .var = variables_2_plot, # The variables you want to plot .country = &quot;Algeria&quot; # The country you want to plot it for ) The above is the same as: calculate_smry_individual(survey1,variables_2_plot,&quot;Algeria&quot;) Which is the same as: survey1 %&gt;% calculate_smry_individual(variables_2_plot, &quot;Algeria&quot;) All of the above code in this section produces the same result: a named list. Each element in the list is a summary of a variable. The variable is the name of the list. In long form, it looks like the following: ## $Q1COVID19 ## # A tibble: 5 x 2 ## Q1COVID19 Percent ## &lt;dbl+lbl&gt; &lt;dbl&gt; ## 1 1 [Very concerned] 28 ## 2 2 [Somewhat concerned] 44 ## 3 3 [Somewhat not concerned] 8 ## 4 4 [Not at all concerned] 20 ## 5 666 [Don&#39;t know/Refuse] 0 ## ## $Q2061A ## # A tibble: 8 x 2 ## Q2061A Percent ## &lt;dbl+lbl&gt; &lt;dbl&gt; ## 1 1 [Economic situation] 28 ## 2 2 [Corruption] 7 ## 3 6 [Internal instability] 4 ## 4 7 [Foreign interference] 2 ## 5 12 [Public services] 1 ## 6 15 [COVID-19] 52 ## 7 16 [Other] 4 ## 8 666 [Don&#39;t know/Refuse] 2 ## ## $Q609 ## # A tibble: 4 x 2 ## Q609 Percent ## &lt;dbl+lbl&gt; &lt;dbl&gt; ## 1 1 [Religious] 48 ## 2 2 [Somewhat religious] 49 ## 3 3 [Not religious] 2 ## 4 666 [Don&#39;t know/Refuse] 1 Let’s save this outcome as an object and move on to plotting. summaries &lt;- survey1 %&gt;% calculate_smry_individual(variables_2_plot, &quot;Algeria&quot;) 1.2.3 Plot the Summaries Again, the same function to create one plot is used to create many plots: plot_smry_individual(). Unlike last time, a helper function is needed to create multiple plots. The helper function is called map. The map function takes two inputs: (1) a list of things to pass to a function, and (2) a function. Essentially, map takes each item in the list, and passes it to the function very efficiently. In this case, you supply the list of summaries you just created, and the plot_sumry_individual() function. The code follows: map( summaries, # List of summaries plot_smry_individual # Plotting function ) The code produces the following output: map( summaries, # List of summaries plot_smry_individual # Plotting function ) ## $Q1COVID19 ## ## $Q2061A ## ## $Q609 Notice, yet again, the caption needs to be changed. To change the caption for all the graphs, just add one line to the map function. map( summaries, # List of summaries plot_smry_individual, # Plotting function .caption = &quot;Arab Barometer Wave VI, Survey I&quot; # Caption ) ## $Q1COVID19 ## ## $Q2061A ## ## $Q609 Congratulations! You have created three plots at once. You can store them in as a single list and call them one at a time. plots &lt;- map( summaries, # List of summaries plot_smry_individual, # Plotting function .caption = &quot;Arab Barometer Wave VI, Survey I&quot; # Caption ) Now, all three plots have been stored in a named list named plots. To look at the first plot: plots$Q1COVID19 To see the plot for variable Q2061A, run the following code: plots$Q2061A Finally, to see the plot for variable Q609, run the following code: plots$Q609 You have now completed all steps in the example code. Congrats! "],["single-country-demographic-plots.html", "Chapter 2 Single Country Demographic Plots 2.1 Create a Single Graph 2.2 Create Many Graphs", " Chapter 2 Single Country Demographic Plots This chapter will cover how to make a frequency graph by a demographic for a single country. 2.1 Create a Single Graph This section will go over how to make a one-off frequency graph by a demographic for a single country. At the end, your code will look like the following: survey1 %&gt;% calculate_demographic_smry_individual(&quot;Q1COVID19&quot;, .dem = &quot;gender&quot;, .country = &quot;Algeria&quot;) %&gt;% plot_demographic_smry_individual(.caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot;) That code will produce the following graph: 2.1.1 Creating a Summary The first step in creating a plot is to gather the data you want to display and organize it. You do this with the calculate_demographic_smry_individual() function. You can learn more about this function in section 6.2 in the larger ArabBarometR guide. Just like calculate_smry_individual(), the three main parameters you need to provide to this function are (1) the data you are using, (2) the variable you want to plot, and (3) the country you want to plot it for. To see all the input parameters for the function, type the code ?calculate_demographic_smry_individual in your R console. In this example, the variable we want to plot is Q1COVID19, and the country we want to plot it for is Algeria1. survey1 %&gt;% # Data calculate_demographic_smry_individual(&quot;Q1COVID19&quot;, # Variable to summarize .country = &quot;Algeria&quot;) # Country The above code will produce the following output: ## $age ## # A tibble: 10 x 3 ## age Q1COVID19 Percent ## &lt;chr&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; ## 1 18-29 1 [Very concerned] 29 ## 2 18-29 2 [Somewhat concerned] 50 ## 3 18-29 3 [Somewhat not concerned] 4 ## 4 18-29 4 [Not at all concerned] 16 ## 5 18-29 666 [Don&#39;t know/Refuse] 0 ## 6 30+ 1 [Very concerned] 27 ## 7 30+ 2 [Somewhat concerned] 42 ## 8 30+ 3 [Somewhat not concerned] 10 ## 9 30+ 4 [Not at all concerned] 21 ## 10 30+ 666 [Don&#39;t know/Refuse] 0 ## ## $gender ## # A tibble: 9 x 3 ## gender Q1COVID19 Percent ## &lt;fct&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; ## 1 Male 1 [Very concerned] 22 ## 2 Male 2 [Somewhat concerned] 44 ## 3 Male 3 [Somewhat not concerned] 9 ## 4 Male 4 [Not at all concerned] 25 ## 5 Male 666 [Don&#39;t know/Refuse] 0 ## 6 Female 1 [Very concerned] 33 ## 7 Female 2 [Somewhat concerned] 44 ## 8 Female 3 [Somewhat not concerned] 8 ## 9 Female 4 [Not at all concerned] 15 ## ## $education ## # A tibble: 10 x 3 ## education Q1COVID19 Percent ## &lt;chr&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; ## 1 Higher 1 [Very concerned] 25 ## 2 Higher 2 [Somewhat concerned] 49 ## 3 Higher 3 [Somewhat not concerned] 11 ## 4 Higher 4 [Not at all concerned] 16 ## 5 Higher 666 [Don&#39;t know/Refuse] 0 ## 6 Max Secondary 1 [Very concerned] 29 ## 7 Max Secondary 2 [Somewhat concerned] 42 ## 8 Max Secondary 3 [Somewhat not concerned] 6 ## 9 Max Secondary 4 [Not at all concerned] 23 ## 10 Max Secondary 666 [Don&#39;t know/Refuse] 0 ## ## $income ## # A tibble: 9 x 3 ## income Q1COVID19 Percent ## &lt;chr&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; ## 1 Can cover expenses 1 [Very concerned] 28 ## 2 Can cover expenses 2 [Somewhat concerned] 43 ## 3 Can cover expenses 3 [Somewhat not concerned] 10 ## 4 Can cover expenses 4 [Not at all concerned] 20 ## 5 Can cover expenses 666 [Don&#39;t know/Refuse] 0 ## 6 Cannot cover expenses 1 [Very concerned] 26 ## 7 Cannot cover expenses 2 [Somewhat concerned] 48 ## 8 Cannot cover expenses 3 [Somewhat not concerned] 7 ## 9 Cannot cover expenses 4 [Not at all concerned] 19 Woah, that’s a lot of summaries! By default, calculate_demographic_smry_individual() creates summaries for age, gender, income, and education. Currently, the function can create summaries by any variable that is 2 categories2. To specify exactly which demographic we want to group the data by, we include one more parameter. survey1 %&gt;% # Data calculate_demographic_smry_individual(&quot;Q1COVID19&quot;, # Variable to summarize .country = &quot;Algeria&quot;, # Country .dem = &quot;gender&quot;) # Demographic to group data by By specifying the parameter .dem, the function now knows it should only group the data by the variables gender. Now the output is as follows: ## $gender ## # A tibble: 9 x 3 ## gender Q1COVID19 Percent ## &lt;fct&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; ## 1 Male 1 [Very concerned] 22 ## 2 Male 2 [Somewhat concerned] 44 ## 3 Male 3 [Somewhat not concerned] 9 ## 4 Male 4 [Not at all concerned] 25 ## 5 Male 666 [Don&#39;t know/Refuse] 0 ## 6 Female 1 [Very concerned] 33 ## 7 Female 2 [Somewhat concerned] 44 ## 8 Female 3 [Somewhat not concerned] 8 ## 9 Female 4 [Not at all concerned] 15 The function calcuate_demographic_smry() creates a named list. In this list, each item is a summary broken down by a demographic and the name of each item is that demographic. Let’s save our gender demographic summary and move on to plotting it. Q1COVID19_gender &lt;- survey1 %&gt;% calculate_demographic_smry_individual(&quot;Q1COVID19&quot;, .country = &quot;Algeria&quot;, .dem = &quot;gender&quot;) 2.1.2 Plotting the Summary The next step is plot the summary we just created. To do this, we use the function plot_demographic_smry_individual(). You can learn more about this function in section 7.2 of the ArabBarometR Guide. There is only one necessary parameter to use plot_smry_individual(): the summary data frame. For a complete list of acceptable parameters and documentation, you can run ?plot_demographic_smry_individual in your R console. Now, we can plug our summary into the plot function: plot_demographic_smry_individual(Q1COVID19_gender) The above code is the same as: Q1COVID19_gender %&gt;% plot_demographic_smry_individual() Both stylings of code produce the following graph: Yet again, we see the caption needs to be changed. We can change it the same way we did in Chapter 1. Q1COVID19_gender %&gt;% plot_demographic_smry_individual( .caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot; ) Now we have the graph: Since Q1COVID19_gender is the same as survey1 %&gt;% calculate_demographic_smry_individual(\"Q1COVID19\", .country = \"Algeria\", .dem = \"gender\"), we can substitute the former with the latter to get the original code in our example. This will give us the same plot that we just created. survey1 %&gt;% calculate_demographic_smry_individual(&quot;Q1COVID19&quot;, .dem = &quot;gender&quot;, .country = &quot;Algeria&quot;) %&gt;% plot_demographic_smry_individual(.caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot;) 2.2 Create Many Graphs We will follow the same steps from Chapter one to create many graphs at once. First, identify the variables to plot. Second, create summaries of those variables. Third, plot those summaries. At the end of this section, your code will look like the following: #.....................Identify the variables..................... variables_2_plot &lt;- list(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) names(variables_2_plot) &lt;- c(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) #......................Create the summaries...................... gender_summaries &lt;- survey1 %&gt;% calculate_demographic_smry_individual(variables_2_plot, &quot;Algeria&quot;, .dem = &quot;gender&quot;) #.......................Plot the summaries....................... gender_plots &lt;- map(gender_summaries, plot_demographic_smry_individual, .caption = &quot;Arab Barometer Wave VI, Survey I&quot;) The result is a named list of plots. Each element in the list is a plot. The element is named for the variable it is a plot of. For example, to see the plot for variable Q1COVID19, run the following code: gender_plots$Q1COVID19 To see the plot for variable Q2061A, run the following code: gender_plots$Q2061A Finally, to see the plot for variable Q609, run the following code: gender_plots$Q609 That’s it! The only limit on the number of graphs you can create at once is the time it will take R to make them. The more graphs you try to create at once, the longer it will take. The steps to creating a named variable list are exactly the same as the ones we reviewed in Chapter 1; therefore, we will begin by creating summaries. For a refresher on creating named lists, click here. We will use the same variables as in Chapter 1: Q1COVID19, Q2061A, and Q609. Let’s begin. 2.2.1 Create Summaries The same function used to create a single summary is used to create many summaries: calculate_demographic_smry_individual(). Recall it takes three parameters: (1) the data you are using, (2) the variable(s) you want to plot, and (3) the country you are creating the plot for. Now, instead of one variable, you supply the list of variables. survey1 %&gt;% # Data calculate_demographic_smry_individual(variables_2_plot, # Variables to summarize &quot;Algeria&quot;) # Country The above code produces a nested named list. Each element in the list is another named list. Each element in the outer list is named for a variable you want to create summaries for. The inner list of each element is a summary with the data grouped by age, gender, income, and education. You can think of it like the following bullet point list: calculate_demographic_smry_individual output Q1COVID19 age Q1COVID19 summary grouped by age gender Q1COVID19 summary grouped by gender income Q1COVID19 summary grouped by income education Q1COVID19 summary grouped by education Q2061A age Q2061A summary grouped by age gender Q2061A summary grouped by gender income Q2061A summary grouped by income education Q2061A summary grouped by education Q609 age Q609 summary grouped by age gender Q609 summary grouped by gender income Q609 summary grouped by income education Q609 summary grouped by education For this example, we will again only be focusing on gender plots. To get only gender summaries, just specify the .dem parameter. survey1 %&gt;% # Data calculate_demographic_smry_individual(variables_2_plot, # Variables to summarize &quot;Algeria&quot;, # Country .dem = &quot;gender&quot;) # Demographic Now, the output of this function looks like this bullet point list: calculate_demographic_smry_individual(.dem=\"gender\") output Q1COVID19 gender Q1COVID19 summary grouped by gender Q2061A gender Q2061A summary grouped by gender Q609 gender Q609 summary grouped by gender Much more manageable . Let’s save this outcome as an object and move on to plotting. gender_summaries &lt;- survey1 %&gt;% calculate_demographic_smry_individual(variables_2_plot, &quot;Algeria&quot;, .dem = &quot;gender&quot;) 2.2.2 Plot the Summaries Again, the same function to create one plot is used to create many plots: plot_demographic_smry_individual(). Just like in Chapter 1, we need to use the map function. In this case, you supply the list of summaries you just created, and the plot_demographic_sumry_individual() function. The code follows: map( gender_summaries, # List of summaries plot_demographic_smry_individual # Plotting function ) The code produces the following output: map( gender_summaries, # List of summaries plot_demographic_smry_individual # Plotting function ) ## $Q1COVID19 ## ## $Q2061A ## ## $Q609 Notice, yet again, the caption needs to be changed. To change the caption for all the graphs, just add one line to the map function. map( gender_summaries, # List of summaries plot_demographic_smry_individual, # Plotting function .caption = &quot;Arab Barometer Wave VI, Survey I&quot; # Caption ) ## $Q1COVID19 ## ## $Q2061A ## ## $Q609 Congratulations! You have created three plots at once. You can store them in as a single list and call them one at a time. gender_plots &lt;- map( gender_summaries, # List of summaries plot_demographic_smry_individual, # Plotting function .caption = &quot;Arab Barometer Wave VI, Survey I&quot; # Caption ) Now, all three plots have been stored in a named list named gender_plots. To look at the first plot: gender_plots$Q1COVID19 To see the plot for variable Q2061A, run the following code: gender_plots$Q2061A Finally, to see the plot for variable Q609, run the following code: gender_plots$Q609 You have now completed all steps in the example code. Congrats! If the style of this code is confusing, see Create a Summary in Chapter 1↩︎ MaryClare is actively working on making this more flexible.↩︎ "],["coming-soon-comparative-overall-graphs.html", "Chapter 3 Coming Soon: Comparative Overall Graphs 3.1 Create a Single Graph", " Chapter 3 Coming Soon: Comparative Overall Graphs This chapter will cover how to make a comparative frequency graph for multiple countries. 3.1 Create a Single Graph This section will go over how to make a one-off comparative frequency graph for a multiple countries. At the end, your code will look like the following: survey1 %&gt;% calculate_smry_comp(&quot;Q1COVID19&quot;) %&gt;% plot_smry_comp(.caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot;) That code will produce the following graph: ## Warning: It is deprecated to specify `guide = FALSE` to remove a guide. Please use `guide = ## &quot;none&quot;` instead. "],["coming-soon-comparative-demographic-graphs.html", "Chapter 4 Coming Soon: Comparative Demographic Graphs 4.1 Create a Single Graph", " Chapter 4 Coming Soon: Comparative Demographic Graphs This chapter will cover how to make a comparative frequency graph by demographic for multiple countries. 4.1 Create a Single Graph This section will go over how to make a one-off comparative frequency graph by demographic for a multiple countries. At the end, your code will look like the following: survey1 %&gt;% calculate_demographic_smry_comp(&quot;Q1COVID19&quot;, .dem = &quot;gender&quot;) %&gt;% plot_demographic_smry_comp(.caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot;) That code will produce the following graph: "],["change-the-font-size.html", "Chapter 5 Change the Font Size", " Chapter 5 Change the Font Size survey1 %&gt;% calculate_smry_individual(&quot;Q1COVID19&quot;, .country = &quot;Algeria&quot;) %&gt;% plot_smry_individual(.caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot;, theme.title_size = 28, # Changes title size theme.subtitle_size = 14, # Changes subtitle size theme.caption_size = 20, # Changes caption size theme.axis_text_size = 26, # Changes axis text size theme.legend_text_size = 8) # Changes legend text size "],["change-the-titlesubtitlecaption.html", "Chapter 6 Change the Title/Subtitle/Caption", " Chapter 6 Change the Title/Subtitle/Caption survey1 %&gt;% calculate_smry_individual(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) %&gt;% plot_smry_individual(.title = &quot;New title&quot;, .subtitle = &quot;New subtitle&quot;, .caption = &quot;New caption&quot;) "],["play-with-colors.html", "Chapter 7 Play with Colors 7.1 Available Colors 7.2 Available Palettes 7.3 Change Colors for Frequency Graphs", " Chapter 7 Play with Colors 7.1 Available Colors The colors available for graphs come from the Arab Barometer Color Guide. You can see a list of colors with the command: ArabBarometer_clrs ## AB blue AB orange AB magenta AB light blue AB purple AB pink ## &quot;#0098BE&quot; &quot;#DF6E21&quot; &quot;#AC517F&quot; &quot;#7CBBC7&quot; &quot;#796391&quot; &quot;#CF83A3&quot; ## AB yellow cool grey zeke james bond dark blue medium blue ## &quot;#FBA950&quot; &quot;#B1C2CF&quot; &quot;#CCEAF2&quot; &quot;#00718E&quot; &quot;#003D4E&quot; &quot;#4B91B8&quot; ## pale green olive green copper light bronze bright apple dark watermelon ## &quot;#C8C6A2&quot; &quot;#AAA764&quot; &quot;#AC5410&quot; &quot;#DC9C56&quot; &quot;#FF5E64&quot; &quot;#E42525&quot; ## mary clare plumb lilac purple coffee midnight ocean ## &quot;#EAA4A4&quot; &quot;#7F375B&quot; &quot;#B4ADDF&quot; &quot;#5C1C95&quot; &quot;#6F3610&quot; &quot;#004B5E&quot; ## salma almond meat army jacket apricot mohamed text grey ## &quot;#C0E5EE&quot; &quot;#F6DAC7&quot; &quot;#706E3E&quot; &quot;#F7B58B&quot; &quot;#959595&quot; &quot;#545454&quot; ## bright sky bright mauve dark apriot Algeria Egypt Iraq ## &quot;#2CB2CE&quot; &quot;#AD517F&quot; &quot;#E28F57&quot; &quot;#DF6E21&quot; &quot;#00718E&quot; &quot;#FBA950&quot; ## Jordan Kuwait Lebanon Libya Mauritania Morocco ## &quot;#7F375B&quot; &quot;#706E3E&quot; &quot;#CF83A3&quot; &quot;#003D4E&quot; &quot;#DC9C56&quot; &quot;#7CBBC7&quot; ## Palestine Saudi Arabia Sudan Tunisia Yemen MENA ## &quot;#AC517F&quot; &quot;#1B909F&quot; &quot;#EAA4A4&quot; &quot;#AAA764&quot; &quot;#796391&quot; &quot;#E42525&quot; You’ll notice some colors are repeated with different names (particularly when it comes to countries). This makes some parts of graphing easier internally. The unique colors included in the package are shown below with their hex code. 7.2 Available Palettes The official branding colors have been combined into several color palettes to use with graphs. To see a list of all the (current) palettes, use the following command: AB_palette_options() ## [1] &quot;blue pair&quot; &quot;orange pair&quot; &quot;purple pair&quot; &quot;AB Default&quot; ## [5] &quot;blue triple&quot; &quot;orange triple&quot; &quot;purple triple&quot; &quot;green triple&quot; ## [9] &quot;mono blue&quot; &quot;mono orange&quot; &quot;mono purple&quot; &quot;mono green&quot; ## [13] &quot;dull rainbow&quot; &quot;cool orange&quot; &quot;blue-orange&quot; &quot;cool bright orange&quot; ## [17] &quot;business man&quot; &quot;pretty cool&quot; &quot;soft rainbow&quot; &quot;warm&quot; ## [21] &quot;purple pink&quot; &quot;stacked&quot; &quot;age&quot; &quot;income&quot; ## [25] &quot;education&quot; &quot;gender&quot; &quot;settlement&quot; &quot;religion&quot; ## [29] &quot;trend colors&quot; 7.3 Change Colors for Frequency Graphs survey1 %&gt;% calculate_smry_individual(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) %&gt;% plot_smry_individual(.clr = &quot;zeke&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
