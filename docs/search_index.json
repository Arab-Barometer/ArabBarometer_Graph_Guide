[["index.html", "ArabBarometR Graphing Guide Introduction Purpose General Guide Process Example Data Header Code", " ArabBarometR Graphing Guide MaryClare Roche 2022-01-14 Introduction Purpose This guide is meant to give instructions on how to create graphs using the ArabBarometR package. This guide does not cover everything the ArabBarometR package can do, particularly with respect to cleaning data. For a more extensive guide, please visit the general ArabBarometer Guide. This guide was created using the bookdown package, which comes with many fun and useful features. An overview of these features can be found in the Guide Features section in the general ArabBarometR Guide. As such, this guide assumes a few things: That you have the ArabBarometR package installed on your machine. If this is not true, please take a look at this chapter in the general ArabBarometR Guide. You have a basic understanding of how to load data and packages in R. If this is not true, you can pursue either this guide or this website. General Guide Process Assuming we are working with clean data, the graphs are created in two steps: Create a summary of the data you want to graph. Graph that summary. For each type of graph, the guide will first go through how to create one graph, then how to create many graphs. Example Data The examples in this guide will be created using data from Wave VI. For single survey graphs, it will use data from from Wave VI, Survey I. For trend graphs, it will use data from Wave VI, Survey I, II, and III, where Survey III is the final survey we conducted in Wave VI. The Wave VI data can be found on the Arab Barometer Github or the Arab Barometer website. Header Code The code examples in this guide will only focus on how to create graphs. It assumes your R file begins with the following code: setwd(&quot;/Path/to/Folder/with/Data&quot;) library(ArabBarometR) survey1 &lt;- haven::read.dta(&quot;Wave6Survey1.dta&quot;) survey2 &lt;- haven::read.dta(&quot;Wave6Survey2.dta&quot;) survey3 &lt;- haven::read.dta(&quot;Wave6Survey3.dta&quot;) In this code example “/Path/to/Folder/with/Data” is the path to where you are saving your work that also contains your data. This is best practice. For more on folders/working directories, see Section 1.1.2 in the general Arab Barometer Guide. Wave6SurveyX.dta in the above code example is a placeholder for whatever you have named the survey data for Surveys I, II, and III from Wave VI. If you read in the data (using the haven::read.dta() function) and save it as survey1, survey2, and survey3, you should be able to copy and paste the code in this guide exactly as is and run it in your own R session. This guide does not go over how to clean the data. For more on how to use the ArabBarometR package to clean Arab Barometer data, please see Chapter 5 Preparing the Data in the general ArabBarometR Guide. "],["single-country-overall-graphs.html", "Chapter 1 Single Country Overall Graphs 1.1 Create a Single Graph 1.2 Create Many Graphs", " Chapter 1 Single Country Overall Graphs This chapter will cover how to make an overall frequency graph for a single country. 1.1 Create a Single Graph This section will go over how to make a one-off frequency graph for a single country. At the end, your code will look like the following: survey1 %&gt;% calculate_smry_individual(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) %&gt;% plot_smry_individual(.caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot;) That code will produce the following graph: Let’s go! 1.1.1 Create a Summary The first step in creating a plot is to gather the data you want to display and organize it. You do this with the create_smry_individual() function. You can learn more about this function in section 6.1 in the larger ArabBarometR guide. The three main parameters you need to provide to this function are (1) the data you are using, (2) the variable you want to plot, and (3) the country you want to plot it for. To see all the input parameters for the function, type the code ?calculate_smry_individual in your R console. In this example, the variable we want to plot is Q1COVID19 and the country we want to plot it for is Algeria. calculate_smry_individual( .data = survey1, # The data you are using .var = &quot;Q1COVID19&quot;, # The variable you want to plot .country = &quot;Algeria&quot; # The country you want to plot it for ) The above is the same as: calculate_smry_individual(survey1,&quot;Q1COVID19&quot;,&quot;Algeria&quot;) Which is the same as: survey1 %&gt;% calculate_smry_individual(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) The last example uses a pipe, %&gt;%, which comes from the package dplyr, which is automatically loaded by ArabBarometR. To learn more about piping and using %&gt;% in programming, see A Note on Piping in the larger ArabBarometR guide. The output of any of the above expressions is the same: ## # A tibble: 5 x 2 ## Q1COVID19 Percent ## &lt;dbl+lbl&gt; &lt;dbl&gt; ## 1 1 [Very concerned] 28 ## 2 2 [Somewhat concerned] 44 ## 3 3 [Somewhat not concerned] 8 ## 4 4 [Not at all concerned] 20 ## 5 666 [Don&#39;t know/Refuse] 0 This data frame is what we are ultimately graphing. There are few things to note about the summary data frame we just created. First, there are two columns. The first column is named for the question we are graphing. The second column is named Percent. If you want to use the plotting functions in ArabBarometR to graph a summary data frame that is not created by a calculate function (see complete list of calculate functions in the ArabBarometR Guide), the data frame must be structured as two columns with the second column named Percent. Second, you can see that the first column is labeled. The labels come from the responses in the data. If the responses in the data are not labeled, this column will not be labeled. In the next step, plotting, the y-axis labels are taken from these labels. So, if the column is not labeled, the y-axis will just be the values of the column. Let’s store the summary as an object and move on. Q1COVID19_summary &lt;- survey1 %&gt;% calculate_smry_individual(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) 1.1.2 Plot the Summary The next step is plot the summary we just created. To do this, we use the function plot_smry_individual(). You can learn more about this function in section 7.1 of the ArabBarometR Guide. There is only one necessary parameter to use plot_smry_individual(): the summary data frame. For a complete list of acceptable parameters and documentation, you can run ?plot_smry_individual in your R console. Now, we can plug our summary into the plot function: plot_smry_individual( .df = Q1COVID19_summary # The summary data frame ) The above code is the same as: Q1COVID19_summary %&gt;% plot_smry_individual() Which is the SAME as: survey1 %&gt;% calculate_smry_individual(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) %&gt;% plot_smry_individual() We can do this because Q1COVID19_summary is equal to survey1 %&gt;% calculate_smry_individual(\"Q1COVID19\", \"Algeria\"). Any of the above code gives the following graph: Almost done! Notice how the caption says Arab Barometer Wave N (DATE)? Let’s change that. survey1 %&gt;% calculate_smry_individual(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) %&gt;% plot_smry_individual( .caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot; # NEW caption ) Now we have the plot we started with! We’re done! 1.2 Create Many Graphs As a rule of thumb in programming, if you can create something one time, you can create it a bajillion times. This is good because for each wave, Arab Barometer needs approximately a bajillion graphs. To create many graphs at once, there are three steps to follow. First, identify the variables to plot. Second, create summaries of those variables. Third, plot those summaries. At the end of this section, your code will look like the following: #.....................Identify the variables..................... variables_2_plot &lt;- list(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) names(variables_2_plot) &lt;- c(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) #......................Create the summaries...................... summaries &lt;- survey1 %&gt;% calculate_smry_individual(variables_2_plot, &quot;Algeria&quot;) #.......................Plot the summaries....................... plots &lt;- map(summaries, plot_smry_individual, .caption = &quot;Arab Barometer Wave VI, Survey I&quot;) The result is a named list of plots. Each element in the list is a plot. The element is named for the variable it is a plot of. For example, to see the plot for variable Q1COVID19, run the following code: plots$Q1COVID19 To see the plot for variable Q2061A, run the following code: plots$Q2061A Finally, to see the plot for variable Q609, run the following code: plots$Q609 That’s it! The only limit on the number of graphs you can create at once is the time it will take R to make them. The more graphs you try to create at once, the longer it will take. Let’s begin. 1.2.1 Identify the Variables When creating many graphs, you need to tell R which variables you want to make plots of. This is true for when you want to create a single graph as well, but it is much more strongly implied. Plus, the variables must be identified in a specific way. To create many summaries at once, you need to provide your variables in a named list. To create a named list, first make a list of the variables you want to plot. variables_2_plot &lt;- list(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) The next step is to name your list. names(variables_2_plot) &lt;- c(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) Now, you have a named list of variables. Time to summarize them. 1.2.2 Create Summaries The same function used to create a single summary is used to create many summaries: calculate_smry_individual(). Recall it takes three parameters: (1) the data you are using, (2) the variable(s) you want to plot, and (3) the country you are creating the plot for. Now, instead of one variable, you supply the list of variables. calculate_smry_individual( .data = survey1, # The data you are using .var = variables_2_plot, # The variables you want to plot .country = &quot;Algeria&quot; # The country you want to plot it for ) The above is the same as: calculate_smry_individual(survey1,variables_2_plot,&quot;Algeria&quot;) Which is the same as: survey1 %&gt;% calculate_smry_individual(variables_2_plot, &quot;Algeria&quot;) All of the above code in this section produces the same result: a named list. Each element in the list is a summary of a variable. The variable is the name of the list. In long form, it looks like the following: ## $Q1COVID19 ## # A tibble: 5 x 2 ## Q1COVID19 Percent ## &lt;dbl+lbl&gt; &lt;dbl&gt; ## 1 1 [Very concerned] 28 ## 2 2 [Somewhat concerned] 44 ## 3 3 [Somewhat not concerned] 8 ## 4 4 [Not at all concerned] 20 ## 5 666 [Don&#39;t know/Refuse] 0 ## ## $Q2061A ## # A tibble: 8 x 2 ## Q2061A Percent ## &lt;dbl+lbl&gt; &lt;dbl&gt; ## 1 1 [Economic situation] 28 ## 2 2 [Corruption] 7 ## 3 6 [Internal instability] 4 ## 4 7 [Foreign interference] 2 ## 5 12 [Public services] 1 ## 6 15 [COVID-19] 52 ## 7 16 [Other] 4 ## 8 666 [Don&#39;t know/Refuse] 2 ## ## $Q609 ## # A tibble: 4 x 2 ## Q609 Percent ## &lt;dbl+lbl&gt; &lt;dbl&gt; ## 1 1 [Religious] 48 ## 2 2 [Somewhat religious] 49 ## 3 3 [Not religious] 2 ## 4 666 [Don&#39;t know/Refuse] 1 Let’s save this outcome as an object and move on to plotting. summaries &lt;- survey1 %&gt;% calculate_smry_individual(variables_2_plot, &quot;Algeria&quot;) 1.2.3 Plot the Summaries Again, the same function to create one plot is used to create many plots: plot_smry_individual(). Unlike last time, a helper function is needed to create multiple plots. The helper function is called map. The map function takes two inputs: (1) a list of things to pass to a function, and (2) a function. Essentially, map takes each item in the list, and passes it to the function very efficiently. In this case, you supply the list of summaries you just created, and the plot_sumry_individual() function. The code follows: map( summaries, # List of summaries plot_smry_individual # Plotting function ) The code produces the following output: map( summaries, # List of summaries plot_smry_individual # Plotting function ) ## $Q1COVID19 ## ## $Q2061A ## ## $Q609 Notice, yet again, the caption needs to be changed. To change the caption for all the graphs, just add one line to the map function. map( summaries, # List of summaries plot_smry_individual, # Plotting function .caption = &quot;Arab Barometer Wave VI, Survey I&quot; ) ## $Q1COVID19 ## ## $Q2061A ## ## $Q609 "],["coming-soon-single-country-demographic-plots.html", "Chapter 2 Coming Soon: Single Country Demographic Plots 2.1 Create a Single Graph", " Chapter 2 Coming Soon: Single Country Demographic Plots This chapter will cover how to make a frequency graph by a demographic for a single country. 2.1 Create a Single Graph This section will go over how to make a one-off frequency graph by a demographic for a single country. At the end, your code will look like the following: survey1 %&gt;% calculate_demographic_smry_individual(&quot;Q1COVID19&quot;, .dem = &quot;gender&quot;, .country = &quot;Algeria&quot;) %&gt;% plot_demographic_smry_individual(.caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot;) That code will produce the following graph: "],["coming-soon-comparative-overall-graphs.html", "Chapter 3 Coming Soon: Comparative Overall Graphs 3.1 Create a Single Graph", " Chapter 3 Coming Soon: Comparative Overall Graphs This chapter will cover how to make a comparative frequency graph for multiple countries. 3.1 Create a Single Graph This section will go over how to make a one-off comparative frequency graph for a multiple countries. At the end, your code will look like the following: survey1 %&gt;% calculate_smry_comp(&quot;Q1COVID19&quot;) %&gt;% plot_smry_comp(.caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot;) That code will produce the following graph: ## Warning: It is deprecated to specify `guide = FALSE` to remove a guide. Please use ## `guide = &quot;none&quot;` instead. "],["coming-soon-comparative-demographic-graphs.html", "Chapter 4 Coming Soon: Comparative Demographic Graphs 4.1 Create a Single Graph", " Chapter 4 Coming Soon: Comparative Demographic Graphs This chapter will cover how to make a comparative frequency graph by demographic for multiple countries. 4.1 Create a Single Graph This section will go over how to make a one-off comparative frequency graph by demographic for a multiple countries. At the end, your code will look like the following: survey1 %&gt;% calculate_demographic_smry_comp(&quot;Q1COVID19&quot;, .dem = &quot;gender&quot;) %&gt;% plot_demographic_smry_comp(.caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot;) That code will produce the following graph: "],["change-the-font-size.html", "Chapter 5 Change the Font Size", " Chapter 5 Change the Font Size survey1 %&gt;% calculate_smry_individual(&quot;Q1COVID19&quot;, .country = &quot;Algeria&quot;) %&gt;% plot_smry_individual(.caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot;, theme.title_size = 28, # Changes title size theme.subtitle_size = 14, # Changes subtitle size theme.caption_size = 20, # Changes caption size theme.axis_text_size = 26, # Changes axis text size theme.legend_text_size = 8) # Changes legend text size "],["change-the-titlesubtitlecaption.html", "Chapter 6 Change the Title/Subtitle/Caption", " Chapter 6 Change the Title/Subtitle/Caption survey1 %&gt;% calculate_smry_individual(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) %&gt;% plot_smry_individual(.title = &quot;New title&quot;, .subtitle = &quot;New subtitle&quot;, .caption = &quot;New caption&quot;) "]]
